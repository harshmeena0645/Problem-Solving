# Unthinkable

from collections import deque
def minTime(n, m, grid):
    q, fresh = deque(), 0
    for i in range(n):
        for j in range(m):
            if grid[i][j] == 2:
                q.append((i, j, 0))
            elif grid[i][j] == 1:
                fresh += 1
    t, rot = 0, 0
    while q:
        x, y, time = q.popleft()
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = x+dx, y+dy
            if 0<=nx<n and 0<=ny<m and grid[nx][ny]==1:
                grid[nx][ny] = 2
                rot += 1
                q.append((nx, ny, time+1))
                t = max(t, time+1)
    return t if rot == fresh else -1

n = int(input())            # number of rows
m = int(input())            # number of columns
grid = [list(map(int, input().split())) for _ in range(n)]
print(minTime(n, m, grid))
