Max of min for every window size

Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().

Examples :

Input: arr[] = [10, 20, 30, 50, 10, 70, 30]
Output: [70, 30, 20, 10, 10, 10, 10] 
Explanation: 
1. First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10], [20], [30], [50], [10], [70] and [30]. Maximum of these minimums is 70. 
2. Second element in output indicates maximum of minimums of all windows of size 2. Minimums of windows of size 2 are [10], [20], [30], [10], [10], and [30]. Maximum of these minimums is 30. 
3. Third element in output indicates maximum of minimums of all windows of size 3. Minimums of windows of size 3 are [10], [20], [10], [10] and [10]. Maximum of these minimums is 20. 
Similarly other elements of output are computed.
Input: arr[] = [10, 20, 30]
Output: [30, 20, 10]
Explanation: First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10] , [20] , [30]. 
Maximum of these minimums are 30 and similarly other outputs can be computed



class Solution:
    def maxOfMins(self, arr):
        n = len(arr)
        res = [0] * (n + 1)

        # Arrays to store previous and next smaller elements
        prev_smaller = [-1] * n
        next_smaller = [n] * n

        stack = []
        # Find previous smaller for every element
        for i in range(n):
            while stack and arr[stack[-1]] >= arr[i]:
                stack.pop()
            if stack:
                prev_smaller[i] = stack[-1]
            stack.append(i)

        stack.clear()
        # Find next smaller for every element
        for i in range(n - 1, -1, -1):
            while stack and arr[stack[-1]] >= arr[i]:
                stack.pop()
            if stack:
                next_smaller[i] = stack[-1]
            stack.append(i)

        # Find max of min for every window size
        for i in range(n):
            length = next_smaller[i] - prev_smaller[i] - 1
            res[length] = max(res[length], arr[i])

        # Some entries may be 0, fill them from right to left
        for i in range(n - 1, 0, -1):
            res[i] = max(res[i], res[i + 1])

        return res[1:]
