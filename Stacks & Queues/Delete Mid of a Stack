Delete Mid of a Stack

Middle element:- floor((size_of_stack+1)/2) (1-based indexing) from the bottom of the stack.

Note: The output shown by the compiler is the stack from top to bottom.

Input: s = [10, 20, 30, 40, 50]
Output: [50, 40, 20, 10]
 Middle element will be element at index 3 from bottom, which is 30. Deleting 30, stack will look like {10 20 40 50}.

Input: s = [10, 20, 30, 40]
Output: [40, 30, 10]
Explanation: The bottom-most element will be 10 and the top-most element will be 40. Middle element will be element at index 2 from bottom, which is 20. Deleting 20, stack will look like {10 30 40}.

Input: s = [5, 8, 6, 7, 6, 6, 5, 10, 12, 9]
Output: [9, 12, 10, 5, 6, 7, 6, 8, 5]



class Solution:
    def deleteMid(self, stack):
        def remove_mid(stack, curr, mid):
            if curr == mid:
                stack.pop()
                return
            temp = stack.pop()
            remove_mid(stack, curr + 1, mid)
            stack.append(temp)

        size = len(stack)
        mid = size // 2
        remove_mid(stack, 0, mid)
        return stack
