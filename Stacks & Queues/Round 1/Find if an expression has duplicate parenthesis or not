Find if an expression has duplicate parenthesis or not

Given a balanced expression, find if it contains duplicate parenthesis or not. A set of parenthesis are duplicate if the same subexpression is surrounded by multiple parenthesis. 


((a+b)+((c+d)))
The subexpression "c+d" is surrounded by two
pairs of brackets.

(((a+(b))+c+d))
The whole expression is surrounded by two 
pairs of brackets.

((a+(b))+(c+d))
(b) and ((a+(b)) is surrounded by two
pairs of brackets but, it will not be counted as duplicate.

Below expressions don't have any duplicate parenthesis -
((a+b)+(c+d)) 

# Duplicate Parenthsis then "TRUE" else "FALSE"
# Stores number of characters between closing and opening parenthesis if count is less than or equal to 1 then brackets are redundant else not
def findDuplicateparenthesis(string): 
    Stack = [] 
    for ch in string:
        if ch == ')': 
            top = Stack.pop() 
            elementsInside = 0
            while top != '(': 
                elementsInside += 1
                top = Stack.pop() 
            
            if elementsInside < 1: 
                return True

        else:
            Stack.append(ch)
    return False

if __name__ == "__main__": 
    string = "(((a+(b))+(c+d)))"
    if findDuplicateparenthesis(string) == True: 
        print("Duplicate Found") 
    else:
        print("No Duplicates Found") 


Output: 
Duplicate Found
Time complexity of above solution is O(n). 

