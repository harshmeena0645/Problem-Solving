Next Smaller Element


Input: [4, 8, 5, 2, 25]
Output: [2, 5, 2, -1, -1]
Explanation: 

Input: [13, 7, 6, 12]
Output: [7, 6, -1, -1]

[Naive Approach] Using Nested loops - O(n^2) Time O(1) Space


def printNSE(arr):
    for i in range(0, len(arr), 1):
        next = -1
        for j in range(i + 1, len(arr), 1):
            if arr[i] > arr[j]:
                next = arr[j]
                break
            
        print(str(arr[i]) + " -- " + str(next))

arr = [11, 13, 21, 3]
printNSE(arr)

Time Complexity: O(N^2)
--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x
# Stack Operation
def printNSE_optimized(arr):
    n = len(arr)
    res = [-1] * n
    stack = []

    for i in range(n - 1, -1, -1):
        while stack and stack[-1] >= arr[i]:
            stack.pop()
        if stack:
            res[i] = stack[-1]
        stack.append(arr[i])

    for i in range(n):
        print(f"{arr[i]} -- {res[i]}")

arr = [11, 13, 21, 3]
printNSE_optimized(arr)


Time Complexity: O(N)
