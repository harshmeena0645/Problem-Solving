Implement Stack using Queues

Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

Implement the MyStack class:

void push(int x) Pushes element x to the top of the stack.
int pop() Removes the element on the top of the stack and returns it.
int top() Returns the element on the top of the stack.
boolean empty() Returns true if the stack is empty, false otherwise.
Notes:

You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
 

Example 1:

Input
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]

Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False



from collections import deque

class MyStack(object):

    def __init__(self):
        self.q1 = deque()  # Main queue
        self.q2 = deque()  # Helper queue

    def push(self, x):
        self.q2.append(x)
        # Push all elements from q1 to q2 to maintain LIFO order
        while self.q1:
            self.q2.append(self.q1.popleft())
        # Swap q1 and q2
        self.q1, self.q2 = self.q2, self.q1

    def pop(self):
        return self.q1.popleft() if self.q1 else None

    def top(self):
        return self.q1[0] if self.q1 else None

    def empty(self):
        return not self.q1


--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x


class MyStack(object):

    def __init__(self):
        self.q1 = []  # Main queue
        self.q2 = []  # Helper queue

    def push(self, x):
        # Step 1: Add to q2
        self.q2.append(x)

        # Step 2: Move all elements from q1 to q2
        while self.q1:
            self.q2.append(self.q1.pop(0))

        # Step 3: Swap q1 and q2
        self.q1, self.q2 = self.q2, self.q1

    def pop(self):
        if self.q1:
            return self.q1.pop(0)
        return None

    def top(self):
        if self.q1:
            return self.q1[0]
        return None

    def empty(self):
        return len(self.q1) == 0
