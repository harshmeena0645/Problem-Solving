Implement Stack using Queues

Implement a last-in-first-out (LIFO) stack using only two queues.

Input
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]

Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False



from collections import deque
class MyStack(object):
    def __init__(self):
        self.q1 = deque()  # Main queue
        self.q2 = deque()  # Helper queue

    def push(self, x):
        self.q2.append(x)
        while self.q1:
            self.q2.append(self.q1.popleft())
        self.q1, self.q2 = self.q2, self.q1

    def pop(self):
        return self.q1.popleft() if self.q1 else None
    def top(self):
        return self.q1[0] if self.q1 else None
    def empty(self):
        return not self.q1


--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x


class MyStack(object):
    def __init__(self):
        self.q1 = []  # Main queue
        self.q2 = []  # Helper queue

    def push(self, x):
        self.q2.append(x)
        while self.q1:
            self.q2.append(self.q1.pop(0))
        self.q1, self.q2 = self.q2, self.q1

    def pop(self):
        if self.q1:
            return self.q1.pop(0)
        return None

    def top(self):
        if self.q1:
            return self.q1[0]
        return None

    def empty(self):
        return len(self.q1) == 0
