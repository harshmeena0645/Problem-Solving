Special Stack

Design a data-structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return the minimum element from the SpecialStack. Your task is to complete all the functions, using a stack data structure.

Note: The output of the code will be the value returned by getMin() function.

Examples:

Input: stack: 18 19 29 15 16
Output: 15
Explanation: The minimum element of the stack is 15.
Input: stack: 34 335 1814 86
Output: 34
Explanation: The minimum element of the stack is 34.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)



minEle = None

def push(arr, ele):
    global minEle
    if not arr:
        arr.append(ele)
        minEle = ele
    else:
        if ele >= minEle:
            arr.append(ele)
        else:
            arr.append(2 * ele - minEle)
            minEle = ele

def pop(arr):
    global minEle
    if not arr:
        return None
    top = arr.pop()
    if top >= minEle:
        return top
    else:
        original_min = minEle
        minEle = 2 * minEle - top
        return original_min

def isFull(n, arr):
    return len(arr) == n

def isEmpty(arr):
    return len(arr) == 0

def getMin(n, arr):
    global minEle
    if not arr:
        return None
    return minEle

