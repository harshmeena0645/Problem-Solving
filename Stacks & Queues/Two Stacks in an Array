Two Stacks in an Array

Your task is to implement  2 stacks in one array efficiently. You need to implement 4 methods.

twoStacks : Initialize the data structures and variables to be used to implement  2 stacks in one array.
push1 : pushes element into the first stack.
push2 : pushes element into the second stack.
pop1 : pops an element from the first stack and returns the popped element. If the first stack is empty, it should return -1.
pop2 : pops an element from the second stack and returns the popped element. If the second stack is empty, it should return -1.

Examples:

Input:
push1(2)
push1(3)
push2(4)
pop1()
pop2()
pop2()
Output: [3, 4, -1]
Explanation:
push1(2) the stack1 will be {2}
push1(3) the stack1 will be {2,3}
push2(4) the stack2 will be {4}
pop1()   the poped element will be 3 from stack1 and stack1 will be {2}
pop2()   the poped element will be 4 from stack2 and now stack2 is empty
pop2()   the stack2 is now empty hence returned -1.
Input:
push1(1)
push2(2)
pop1()
push1(3)
pop1()
pop1()
Output: [1, 3, -1]
Explanation:
push1(1) the stack1 will be {1}
push2(2) the stack2 will be {2}
pop1()   the poped element will be 1 from stack1 and stack1 will be empty
push1(3) the stack1 will be {3}
pop1()   the poped element will be 3 from stack1 and stack1 will be empty
pop1()   the stack1 is now empty hence returned -1.
Input:
push1(2)
push1(3)
push1(4)
pop2()
pop2()
pop2()
Output: [-1, -1, -1]
Explanation:
push1(2) the stack1 will be {2}
push1(3) the stack1 will be {2,3}
push1(4) the stack1 will be {2,3,4}
pop2()   the stack2 is empty hence returned -1.
pop2()   the stack2 is empty hence returned -1.
pop2()   the stack2 is empty hence returned -1.



class TwoStacks:
    def __init__(self, size=100):  # Default size is 100 unless specified
        self.size = size
        self.arr = [0] * size
        self.top1 = -1              # Stack 1 starts from left
        self.top2 = size            # Stack 2 starts from right

    def push1(self, x):
        if self.top1 + 1 < self.top2:  # Check for available space
            self.top1 += 1
            self.arr[self.top1] = x
        else:
            print("Stack Overflow in Stack 1")

    def push2(self, x):
        if self.top2 - 1 > self.top1:  # Check for available space
            self.top2 -= 1
            self.arr[self.top2] = x
        else:
            print("Stack Overflow in Stack 2")

    def pop1(self):
        if self.top1 >= 0:
            popped = self.arr[self.top1]
            self.top1 -= 1
            return popped
        else:
            return -1

    def pop2(self):
        if self.top2 < self.size:
            popped = self.arr[self.top2]
            self.top2 += 1
            return popped
        else:
            return -1
