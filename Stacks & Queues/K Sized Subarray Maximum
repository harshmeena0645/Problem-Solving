K Sized Subarray Maximum

Your task is find maximum value for each contiguous subarray of size k. Output should be array of maximum values corresponding to each contiguous subarray.


Input: arr[] = [1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3
Output: [3, 3, 4, 5, 5, 5, 6] 
Explanation: 
1st contiguous subarray = [1 2 3] max = 3
2nd contiguous subarray = [2 3 1] max = 3
3rd contiguous subarray = [3 1 4] max = 4
4th contiguous subarray = [1 4 5] max = 5
5th contiguous subarray = [4 5 2] max = 5
6th contiguous subarray = [5 2 3] max = 5
7th contiguous subarray = [2 3 6] max = 6

Input: arr[] = [5, 1, 3, 4, 2, 6], k = 1
Output: [5, 1, 3, 4, 2, 6]
When k = 1, each element in the array is its own subarray, so the output is simply the same array


from collections import deque
class Solution:
    def max_of_subarrays(self, arr, n, k):
        result = []
        dq = deque()
        for i in range(n):
            if dq and dq[0] == i - k:
                dq.popleft()
            
            while dq and arr[dq[-1]] <= arr[i]:
                dq.pop()
            
            dq.append(i)
            if i >= k - 1:
                result.append(arr[dq[0]])
        
        return result



