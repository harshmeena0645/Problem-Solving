Max rectangle

Given a binary matrix mat[][] of size n * m. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Examples:

Input: mat[][] = [[0, 1, 1, 0],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 0, 0]]
Output: 8
Explanation: The largest rectangle with only 1’s is from (1, 0) to (2, 3) which is
[1, 1, 1, 1]
[1, 1, 1, 1]
and area is 4 *2 = 8.
Input: mat[][] = [[0, 1, 1],
                [1, 1, 1],
                [0, 1, 1]]
Output: 6
Explanation: The largest rectangle with only 1’s is from (0, 1) to (2, 2) which is
[1, 1]
[1, 1]
[1, 1]



class Solution:
    def maxArea(self, mat):
        if not mat:
            return 0
        
        n = len(mat)
        m = len(mat[0])
        max_area = 0

        # Helper to find largest rectangle in histogram
        def largest_histogram_area(heights):
            stack = []
            max_area = 0
            heights.append(0)  # Add a zero height to flush the stack

            for i, h in enumerate(heights):
                while stack and heights[stack[-1]] > h:
                    height = heights[stack.pop()]
                    width = i if not stack else i - stack[-1] - 1
                    max_area = max(max_area, height * width)
                stack.append(i)
            
            heights.pop()  # Restore original list
            return max_area

        # Step 1: Treat each row as histogram base
        heights = [0] * m
        for row in mat:
            for j in range(m):
                if row[j] == 0:
                    heights[j] = 0
                else:
                    heights[j] += 1
            max_area = max(max_area, largest_histogram_area(heights))

        return max_area
