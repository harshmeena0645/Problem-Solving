Preorder to Postorder - BST

arr[]  = {40,30,35,80,100}
Output: 35 30 100 80 40


arr[]  = {40,30,32,35,80,90,100,120}
Output: 35 32 30 120 100 90 80 40


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).



class Node:
    def __init__(self, data=0):
        self.data = data
        self.left = None
        self.right = None

def Bst(pre, size) -> Node:
    index = [0]

    def buildBST(min_val, max_val):
        if index[0] >= size:
            return None

        val = pre[index[0]]

        if val < min_val or val > max_val:
            return None
            
        root = Node(val)
        index[0] += 1

        root.left = buildBST(min_val, val - 1)
        root.right = buildBST(val + 1, max_val)

        return root

    return buildBST(float('-inf'), float('inf'))
