Tree Boundary Traversal
 

Input: root[] = [1, 2, 3, 4, 5, 6, 7, N, N, 8, 9, N, N, N, N]
Output: [1, 2, 4, 8, 9, 6, 7, 3]
 
Input: root[] = [1, 2, N, 4, 9, 6, 5, N, 3, N, N, N, N, 7, 8]
Output: [1, 2, 4, 6, 5, 7, 8]
As the root doesn't have a right subtree, the right boundary is not included in the traversal.

Input: root[] = [1, N, 2, N, 3, N, 4, N, N] 
Output: [1, 4, 3, 2]


Left boundary: [1] (as there is no left subtree)
Leaf nodes: [4]
Right boundary: [3, 2] (in reverse order)
Final traversal: [1, 4, 3, 2]



class Solution:
    def boundaryTraversal(self, root):
        if not root:
            return []

        result = []

        def is_leaf(node):
            return node and not node.left and not node.right

        def add_left_boundary(node):
            curr = node.left
            while curr:
                if not is_leaf(curr):
                    result.append(curr.data)
                if curr.left:
                    curr = curr.left
                else:
                    curr = curr.right

        def add_leaves(node):
            if is_leaf(node):
                result.append(node.data)
                return
            if node.left:
                add_leaves(node.left)
            if node.right:
                add_leaves(node.right)

        def add_right_boundary(node):
            curr = node.right
            stack = []
            while curr:
                if not is_leaf(curr):
                    stack.append(curr.data)
                if curr.right:
                    curr = curr.right
                else:
                    curr = curr.left
            while stack:
                result.append(stack.pop())

        if not is_leaf(root):
            result.append(root.data)

        add_left_boundary(root)
        add_leaves(root)
        add_right_boundary(root)

        return result
