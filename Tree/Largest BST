Largest BST

You're given a binary tree. Your task is to find the size of the largest subtree within this binary tree that also satisfies the properties of a Binary Search Tree (BST). The size of a subtree is defined as the number of nodes it contains.

Note: A subtree of the binary tree is considered a BST if for every node in that subtree, the left child is less than the node, and the right child is greater than the node, without any duplicate values in the subtree.

Examples :

Input: root = [5, 2, 4, 1, 3]
Root-to-leaf-path-sum-equal-to-a-given-number-copy
Output: 3
Explanation:The following sub-tree is a BST of size 3
Balance-a-Binary-Search-Tree-3-copy
Input: root = [6, 7, 3, N, 2, 2, 4]

Output: 3
Explanation: The following sub-tree is a BST of size 3:




class Solution:
    def largestBst(self, root):
        self.max_bst_size = 0

        def helper(node):
            if not node:
                # is_bst, size, min, max
                return True, 0, float('inf'), float('-inf')
            
            left_is_bst, left_size, left_min, left_max = helper(node.left)
            right_is_bst, right_size, right_min, right_max = helper(node.right)
            
            # If current subtree is a BST
            if left_is_bst and right_is_bst and left_max < node.data < right_min:
                size = left_size + right_size + 1
                self.max_bst_size = max(self.max_bst_size, size)
                return True, size, min(left_min, node.data), max(right_max, node.data)
            else:
                return False, 0, 0, 0

        helper(root)
        return self.max_bst_size
