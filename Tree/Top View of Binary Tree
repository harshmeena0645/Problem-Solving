Top View of Binary Tree


Return the nodes from the leftmost node to the rightmost node.
If two nodes are at the same position (horizontal distance) and are outside the shadow of the tree, consider the leftmost node only. 

Input: root[] = [1, 2, 3]
Output: [2, 1, 3]

Input: root[] = [10, 20, 30, 40, 60, 90, 100]
Output: [40, 20, 10, 30, 100]

Input: root[] = [1, 2, 3, N, 4, N, N, N, 5, N, 6]
Output: [2, 1, 3, 6]



from collections import deque
class Node:
    def __init__(self, val):
        self.data = val
        self.left = None
        self.right = None

class Solution:
    def topView(self, root):
        if not root:
            return []

        q = deque()
        top_nodes = {}
        q.append((root, 0))
        min_hd = max_hd = 0

        while q:
            node, hd = q.popleft()
            if hd not in top_nodes:
                top_nodes[hd] = node.data

            min_hd = min(min_hd, hd)
            max_hd = max(max_hd, hd)

            if node.left:
                q.append((node.left, hd - 1))
            if node.right:
                q.append((node.right, hd + 1))

        return [top_nodes[hd] for hd in range(min_hd, max_hd + 1)]
