Min distance b/w two given nodes of BT

Two node values, a and b, your task is to find the minimum distance between them. The given two nodes are guaranteed to be in the binary tree and all node values are unique.


Input: Tree = [1, 2, 3]
a = 2, b = 3
Output: 2
Explanation: We need the distance between 2 and 3. Being at node 2, we need to take two steps ahead in order to reach node 3. The path followed will be: 2 -> 1 -> 3. Hence, the result is 2. 

Input: Tree = [11, 22, 33, 44, 55, 66, 77]
a = 77, b = 22
Output: 3
Explanation: We need the distance between 77 and 22. Being at node 77, we need to take three steps ahead in order to reach node 22. The path followed will be: 77 -> 33 -> 11 -> 22. Hence, the result is 3.

Input: Tree = [1, 2, 3]
a = 1, b = 3
Output: 1



class Solution:
    def findDist(self, root, a, b):
        def lca(node, a, b):
            if not node:
                return None
            if node.data == a or node.data == b:
                return node
            left = lca(node.left, a, b)
            right = lca(node.right, a, b)
            if left and right:
                return node
            return left if left else right

        def findLevel(node, val, level):
            if not node:
                return -1
            if node.data == val:
                return level
            left = findLevel(node.left, val, level + 1)
            if left != -1:
                return left
            return findLevel(node.right, val, level + 1)

        ancestor = lca(root, a, b)
        d1 = findLevel(ancestor, a, 0)
        d2 = findLevel(ancestor, b, 0)
        return d1 + d2
