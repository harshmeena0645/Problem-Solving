Assigning Employees in a Company Hierarchy-BST


Print the inorder successor

Input:
6
20 10 30 5 15 25
15
Output:
20
--> 20 is the smallest number greater than 15

Input:
3
100 50 150
150
Output:
No Inorder Successor
--> It is the largest element in BST


class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def insert(root, key):
    if root is None:
        return Node(key)
    if key < root.key:
        root.left = insert(root.left, key)
    else:
        root.right = insert(root.right, key)
    return root

def inorder_successor(root, target):
    successor = None
    while root:
        if target < root.key:
            successor = root
            root = root.left
        elif target > root.key:
            root = root.right
        else:
            if root.right:
                successor = find_min(root.right)
            break
    return successor.key if successor else "No Inorder Successor"

def find_min(node):
    while node.left:
        node = node.left
    return node

n = int(input()) 
employee_ids = list(map(int, input().split()))  
target = int(input())
root = None
for emp_id in employee_ids:
    root = insert(root, emp_id)
print(inorder_successor(root, target))

--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x

def company(l, target):
    l.sort()
    for num in l:
        if num > target:
            return num 
    return "No Inorder Successor"

n = int(input())  
l = list(map(int, input().split())) 
target = int(input()) 
print(company(l, target))
