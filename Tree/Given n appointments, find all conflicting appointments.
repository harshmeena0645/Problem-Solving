Given n appointments, find all conflicting appointments. 

Input: appointments[] = { {1, 5} {3, 7}, {2, 6}, {10, 15}, {5, 6}, {4, 100}}
Output: Following are conflicting intervals
[3,7] Conflicts with [1,5]
[2,6] Conflicts with [1,5]
[5,6] Conflicts with [3,7]
[4,100] Conflicts with [1,5]


v = [[1, 5], [3, 7], [2, 6], [10, 15],
     [5, 6], [4, 100]]


n = len(v)
result = []
for i in range(n):
    for j in range(i-1, -1, -1):
        if v[j][0] < v[i][1]:
            result.append([[v[i][0], v[i][1]], [v[j][1], v[j][0]]])

for it in result:
    print("[" + str(it[0][0]) + "," + str(it[0][1]) +
          "] having Conflict with [" + str(it[1][0]) + "," + str(it[1][1]) + "]")



Output
[3,7] having Conflict with [5,1]
[2,6] having Conflict with [7,3]
[2,6] having Conflict with [5,1]
[10,15] having Conflict with [6,2]
[10,15] having Conflict with [7,3]
[10,15] having Conflict with [5,1]
[5,6] having Conflict with [6,2]
[5,6] having Conflict with [7,3]
[5,6] having Conflict with [5,1]
[4,100] having Conflict with [6,5]
[4,100] having Conflict with [15,10]
[4,100] having Conflict with [6,2]
[4,100] having Conflict with [7,3]
[4,100] having Conflict with [5,1]
Complexity Analysis:

Time Complexity: O(n^2).
Auxiliary Space: O(n)+O(n),in the worst case.

