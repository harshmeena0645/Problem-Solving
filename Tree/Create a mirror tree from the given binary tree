Create a mirror tree from the given binary tree

Given a binary tree, the task is to create a new binary tree which is a mirror image of the given binary tree.

Examples: 

Input:
        5
       / \
      3   6
     / \
    2   4
Output:
Inorder of original tree: 2 3 4 5 6 
Inorder of mirror tree: 6 5 4 3 2
Mirror tree will be:
  5
 / \
6   3
   / \
  4   2

Input:
        2
       / \
      1   8
     /     \
    12      9
Output:
Inorder of original tree: 12 1 2 8 9 
Inorder of mirror tree: 9 8 2 1 12



# Python3 implementation of the approach

# A binary tree node has data, 
# pointer to left child and 
# a pointer to right child 
# Linked list node 
class Node: 
    def __init__(self, data): 
        self.data = data 
        self.left = None
        self.right = None

# Helper function that allocates 
# a new node with the given data 
# and None left and right pointers
def createNode(val):
    newNode = Node(0)
    newNode.val = val
    newNode.left = None
    newNode.right = None
    return newNode

# Helper function to print Inorder traversal
def inorder(root):
    if (root == None):
        return
    inorder(root.left)
    print( root.val, end = " ")
    inorder(root.right)

# mirrorify function takes two trees,
# original tree and a mirror tree
# It recurses on both the trees,
# but when original tree recurses on left,
# mirror tree recurses on right and
# vice-versa
def mirrorify(root, mirror):

    if (root == None) :
        mirror = None
        return mirror
    
    # Create new mirror node 
    # from original tree node
    mirror = createNode(root.val)
    mirror.right = mirrorify(root.left, 
                           ((mirror).right))
    mirror.left = mirrorify(root.right, 
                          ((mirror).left))
    return mirror

# Driver Code 
if __name__=='__main__': 

    tree = createNode(5)
    tree.left = createNode(3)
    tree.right = createNode(6)
    tree.left.left = createNode(2)
    tree.left.right = createNode(4)

    # Print inorder traversal of the input tree
    print("Inorder of original tree: ")
    inorder(tree)
    mirror = None
    mirror = mirrorify(tree, mirror)

    # Print inorder traversal of the mirror tree
    print("\nInorder of mirror tree: ")
    inorder(mirror)

# This code is contributed by Arnab Kundu
