BST with Dead End

You are given a Binary Search Tree (BST) containing unique positive integers greater than 0.

Your task is to determine whether the BST contains a dead end.

Note: A dead end is a leaf node in the BST such that no new node can be inserted in the BST at or below this node while maintaining the BST property and the constraint that all node values must be > 0.

Input: root[] = [8, 5, 9, 2, 7, N, N, 1]

Output: true
Explanation: Node 1 is a Dead End in the given BST.
Input: root[] = [8, 7, 10, 2, N, 9, 13]

Output: true
Explanation: Node 9 is a Dead End in the given BST.



class Solution:
    def isDeadEnd(self, root):
        def helper(node, min_val, max_val):
            if not node:
                return False

            if min_val == max_val:
                return True

            return (helper(node.left, min_val, node.data - 1) or
                    helper(node.right, node.data + 1, max_val))

        return helper(root, 1, float('inf'))
