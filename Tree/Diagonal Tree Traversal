Diagonal Tree Traversal

Consider lines of slope -1 passing between nodes. Given a Binary Tree, return a single list containing all diagonal elements in a binary tree belonging to same line.
If the diagonal element are present in two different subtrees then left subtree diagonal element should be taken first and then right subtree. 

Input : root = [8, 3, 10, 1, 6, N, 14, N, N, 4, 7, 13]
           8
         /   \
        3      10
      /   \      \
     1     6     14
         /   \   /
        4     7 13
Output : [8, 10, 14, 3, 6, 7, 13, 1, 4]
Explanation:
unnamed
Diagonal Traversal of binary tree : 8 10 14 3 6 7 13 1 4

Input: root = [1, 2, N, 3, N]
                1
               /
              2
             /
            3
Output: [1, 2, 3]


from collections import deque
class Node:
    def __init__(self, val):
        self.data = val
        self.left = None
        self.right = None

class Solution:
    def diagonal(self, root):
        if not root:
            return []

        result = []
        queue = deque()
        queue.append(root)

        while queue:
            node = queue.popleft()

            while node:
                result.append(node.data)
                if node.left:
                    queue.append(node.left)

                node = node.right

        return result
