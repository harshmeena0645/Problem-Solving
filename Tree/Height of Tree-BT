Height of Tree-BT
//1 based indexing


Input:
7
3 9 20 null null 15 7
Output:
3

  3
 / \
 9 20
   / \
  15  7


class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.data = key

def build_tree(values):
    if not values or values[0] == "null":
        return None

    root = Node(int(values[0]))
    queue = [root]
    i = 1

    while i < len(values):
        current = queue.pop(0)

        if i < len(values) and values[i] != "null":
            current.left = Node(int(values[i]))
            queue.append(current.left)
        i += 1

        if i < len(values) and values[i] != "null":
            current.right = Node(int(values[i]))
            queue.append(current.right)
        i += 1

    return root

def max_depth(root):
    if not root:
        return 0
    return 1 + max(max_depth(root.left), max_depth(root.right))

n = int(input())
values = input().split()
root = build_tree(values)
print(max_depth(root))

--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x


def tree_height(values):
    values = [v for v in values if v != "null"]
    l = len(values)
    if l == 0:
        return 0
    if l == 1:
        return 1
    i = 1
    while (2**i - 1) < l:
        i += 1
    return i

n = int(input())  
values = input().split()  
print(tree_height(values))

--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x

class Solution:
    def maxDepth(self, root):
        if not root:
            return 0
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1
