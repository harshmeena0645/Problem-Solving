Balanced Tree Check

A binary tree is considered height-balanced if the absolute difference in heights of the left and right subtrees is at most 1 for every node in the tree.


Input: root[] = [10, 20, 30, 40, 60]
Output: true
The height difference between left and right subtrees at all nodes is at most 1.

Input: root[] = [1, 2, 3, 4, N, N, N, 5]
Output: false
The height difference between left and right subtrees at node 2 is 2,which exceeds 1.

Input: root[] = [1, 2, N, N, 3]
Output: false
The height difference between left and right subtrees at node 1 is 2, which exceeds 1.



class Solution:
    def isBalanced(self, root):
        height, balanced = check(root)
        def check(node):
            if not node:
                return 0, True

            left_height, left_balanced = check(node.left)
            right_height, right_balanced = check(node.right)
            current_balanced = (abs(left_height - right_height) <= 1)

            return 1 + max(left_height, right_height), left_balanced and right_balanced and current_balanced

        return balanced
