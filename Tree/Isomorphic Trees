Isomorphic Trees


Two trees are called isomorphic if one can be obtained from another by a series of flips, i.e. by swapping left and right children of several nodes. Any number of nodes at any level can have their children swapped. Two empty trees are isomorphic.


Input: root1[] = [1, 2, 3, 4, 5, 7, 6, N, 7, 8], root2[] = [1, 3, 2, N, 6, 4, 5, 8, 7]
Output: true

Input: root1[] = [1, 2, 3, 4], root2[] = [1, 3, 2, 4]
Output: false

Input: root1[] = [1, 2, 3, 4], root2[] = [1, 3, 2, N, N, N, 4]
Output: true



class Solution:
    def isIsomorphic(self, root1, root2): 
        if root1 is None and root2 is None:
            return True
        
        if root1 is None or root2 is None:
            return False
        
        if root1.data != root2.data:
            return False

        return (
            (self.isIsomorphic(root1.left, root2.left) and self.isIsomorphic(root1.right, root2.right)) or
            (self.isIsomorphic(root1.left, root2.right) and self.isIsomorphic(root1.right, root2.left))
        )
