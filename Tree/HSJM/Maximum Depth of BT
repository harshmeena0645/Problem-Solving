Maximum Depth of Binary Tree
// 1-Based

Input: root = [3,9,20,null,null,15,7]
Output: 3

Input: root = [1,null,2]
Output: 2




class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def depth(root):
        if root is None:
            return 0
        return 1 + max(depth(root.left), depth(root.right))

    def build_tree_from_list(values):
        if not values or values[0] is None:
            return None

        root = Node(values[0])
        queue = [root]
        i = 1

        while queue and i < len(values):
            node = queue.pop(0)
            if i < len(values) and values[i] is not None:
                node.left = Node(values[i])
                queue.append(node.left)
            i += 1
            if i < len(values) and values[i] is not None:
                node.right = Node(values[i])
                queue.append(node.right)
            i += 1
        return root

values = [1, 2, 3, "null", "null", "null", 5]
values = [None if v == "null" else v for v in values]
root = build_tree_from_list(values)
print("Max Depth:", depth(root))
