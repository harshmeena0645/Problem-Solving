Traversal Inorder, Preorder, Postorder, Levelorder in BT

Input: root = [1,null,2,3]
Output: [1,3,2]

Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]
Output: [4,2,6,5,7,1,3,9,8]

Input: root = []
Output: []

Input: root = [1]
Output: [1]

 

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right



class Solution:
    def preorderTraversal(self, root):
        res = []
        def preorder(node):
            if not node:
                return
            
            res.append(node.val)
            preorder(node.left)
            preorder(node.right)
        
        preorder(root)
        return res



class Solution:
    def inorderTraversal(self, root):
        res = []
        def inorder(node):
            if not node:
                return
            
            inorder(node.left)
            res.append(node.val)
            inorder(node.right)
        
        inorder(root)
        return res



class Solution:
    def postorderTraversal(self, root):
        res = []
        def postorder(node):
            if not node:
                return
            
            postorder(node.left)
            postorder(node.right)
            res.append(node.val)
        
        postorder(root)
        return res



class Solution:
    def levelOrder(self, root):
        res = []
        
        def bfs(nodes):
            if not nodes:
                return
            res.append([node.val for node in nodes])
            next_level = []
            for node in nodes:
                if node.left:
                    next_level.append(node.left)
                if node.right:
                    next_level.append(node.right)
            bfs(next_level)
        
        bfs([root] if root else [])
        return res
