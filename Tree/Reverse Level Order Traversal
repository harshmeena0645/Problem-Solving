Reverse Level Order Traversal

Given a binary tree, find its reverse level order traversal. ie- the traversal must begin from the last level.

Input: root = [1, 3, 2]
Output: 3 2 1
Explanation: Traversing level 1 : 3 2, Traversing level 0 : 1

Input: root = [10, 20, 30, 40, 60]
Output: 40 60 20 30 10
Explanation: Traversing level 2 : 40 60, Traversing level 1 : 20 30, Traversing level 0 : 10

Input: root = [1, 2, 3]
Output: 2 3 1



from collections import deque
class Solution:
    def reverseLevelOrder(self, root):
        if not root:
            return []

        queue = deque([root])
        result = []

        while queue:
            node = queue.popleft()
            result.append(node.data)

            if node.right:
                queue.append(node.right)
            if node.left:
                queue.append(node.left)

        return result[::-1]
