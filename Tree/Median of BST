Median of BST

Given a Binary Search Tree, find the Median of its Node values.

Input: root = [6, 3, 8, 1, 4, 7, 9]
       6
     /   \
   3      8   
 /  \    /  \
1    4  7    9
Output: 6
Explanation: Inorder of Given BST will be: 1, 3, 4, 6, 7, 8, 9. So, here median will 6.

Input: root = [6, 3, 8, 1, 4, 7, N]
Output: 5
Explanation:Inorder of Given BST will be: 1, 3, 4, 6, 7, 8. So, here median will (4 + 6)/2 = 10/2 = 5.

Input: root = [18, 16, 20, 7]
Output: 17


class Solution:
    def count_nodes(self, root):
        if not root:
            return 0
        return 1 + self.count_nodes(root.left) + self.count_nodes(root.right)

    def inorder(self, root, count, k):
        if not root:
            return
        self.inorder(root.left, count, k)
        
        count[0] += 1
        if count[0] == k[0]:
            k[1] = root.data
        if k[2] and count[0] == k[2]:
            k[3] = root.data

        self.inorder(root.right, count, k)

    def findMedian(self, root):
        n = self.count_nodes(root)
        count = [0]

        if n % 2 == 1:
            k = [n // 2 + 1, None, None, None]
            self.inorder(root, count, k)
            return k[1]
        else:
            k = [n // 2, None, n // 2 + 1, None]
            self.inorder(root, count, k)
            median = (k[1] + k[3]) / 2.0
            return int(median) if median == int(median) else median

            k = [n // 2, None, n // 2 + 1, None]  # k[1] & k[3] are two middle values
            self.inorder(root, count, k)
            return (k[1] + k[3]) // 2
