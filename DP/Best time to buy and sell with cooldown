Best time to buy and sell with cooldown


Input:
5
1 2 3 0 2
Output:
3
Explanation: transactions = [buy, sell, cooldown, buy, sell]


def maxProfit(prices):
    n = len(prices)
    if n == 0:
        return 0

    hold = [0] * n
    sold = [0] * n
    rest = [0] * n

    hold[0] = -prices[0] 
    sold[0] = 0           
    rest[0] = 0 

    for i in range(1, n):
        hold[i] = max(hold[i - 1], rest[i - 1] - prices[i])
        sold[i] = hold[i - 1] + prices[i]
        rest[i] = max(rest[i - 1], sold[i - 1])

    return max(sold[n - 1], rest[n - 1])

n = int(input())
prices = list(map(int, input().split()))
print(maxProfit(prices))

| Type  | Complexity |
| ----- | ---------- |
| Time  | O(n)       |
| Space | O(n)       |
