K closest elements

You are given a sorted array arr[] of unique integers, an integer k, and a target value x. Return exactly k elements from the array closest to x, excluding x if it exists.

An element a is closer to x than b if:


|a - x| < |b - x|, or
|a - x| == |b - x| and a > b (i.e., prefer the larger element if tied)


Return the k closest elements in order of closeness.

Examples:

Input: arr[] = [1, 3, 4, 10, 12], k = 2, x = 4
Output: 3 1
Explanation: 4 is excluded, Closest elements to 4 are: 3 (1), 1 (3). So, the 2 closest elements are: 3 1
Input: arr[] = [12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56], k = 4, x = 35
Output: 39 30 42 45
Explanation: First closest element to 35 is 39.
Second closest element to 35 is 30.
Third closest element to 35 is 42.
And fourth closest element to 35 is 45.


import heapq

class Solution:
    def printKClosest(self, arr, k, x):
        maxHeap = []

        for val in arr:
            if val == x:
                continue  # skip x itself
            diff = abs(val - x)
            # Use -diff and -val to build max heap with custom rules
            heapq.heappush(maxHeap, (diff, -val))

        # Extract k closest
        result = []
        for _ in range(k):
            if maxHeap:
                result.append(-heapq.heappop(maxHeap)[1])
        
        return result



âœ… Time & Space Complexity:
Time: O(n log n) due to heap operations (could be improved with binary search + two pointers).

Space: O(n) for heap.
