Length of the largest subarray with contiguous elements | Set 2

Given an array of integers, find length of the longest subarray which contains numbers that can be arranged in a continuous sequence. 
In the previous post, we have discussed a solution that assumes that elements in given array are distinct. Here we discuss a solution that works even if the input array has duplicates.

Input:  arr[] = {10, 12, 11};
Output: Length of the longest contiguous subarray is 3


Input:  arr[] = {10, 12, 12, 10, 10, 11, 10};
Output: Length of the longest contiguous subarray is 2 


class Solution:
    def findLength(self, arr):
        n = len(arr)
        max_len = 1
        
        for i in range(n):
            seen = set()
            mn = arr[i]
            mx = arr[i]
            seen.add(arr[i])

            for j in range(i + 1, n):
                # if duplicate, break
                if arr[j] in seen:
                    break

                seen.add(arr[j])
                mn = min(mn, arr[j])
                mx = max(mx, arr[j])

                # if elements are contiguous
                if mx - mn == j - i:
                    max_len = max(max_len, j - i + 1)

        return max_len


⏱ Time & Space Complexity:
Time: O(n^2) — Nested loop for subarrays.

Space: O(n) — HashSet per outer iteration.
