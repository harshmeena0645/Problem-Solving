Largest subarray with 0 sum

Given an array arr containing both positive and negative integers, the task is to compute the length of the largest subarray that has a sum of 0.

Examples:

Input: arr[] = [15, -2, 2, -8, 1, 7, 10, 23]
Output: 5
Explanation: The largest subarray with a sum of 0 is [-2, 2, -8, 1, 7].
Input: arr[] = [2, 10, 4]
Output: 0
Explanation: There is no subarray with a sum of 0.
Input: arr[] = [1, 0, -4, 3, 1, 0]
Output: 5
Explanation: The subarray is [0, -4, 3, 1, 0].


class Solution:
    def maxLen(self, arr):
        prefix_map = {}
        max_len = 0
        total = 0

        for i in range(len(arr)):
            total += arr[i]

            if total == 0:
                max_len = i + 1

            if total in prefix_map:
                max_len = max(max_len, i - prefix_map[total])
            else:
                prefix_map[total] = i

        return max_len


⏱ Time & Space Complexity:
Time: O(n) — single pass through array.

Space: O(n) — for hash map.
