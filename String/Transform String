Transform String

Minimum number of step required to change A to B
Only allowed operation for the transformation is selecting a character from string A and inserting it in the beginning of string A.
If not Possible -1.

A = "abd"
B = "bad"
Output: 1
Only 1 operation:Pick 'b' and place it at the front.

A = "GeeksForGeeks"
B = "ForGeeksGeeks"
Output: 3
Pick 'r' and place in front "rGeeksFGeeks"
Pick 'o' and place in front "orGeeksFGeeks"
Pick 'F'and place in front "ForGeeksGeeks"



class Solution:
    def transform(self, A, B): 
        if len(A) != len(B):
            return -1
        
        m = {}
        n = len(A)
        for i in range(n):
            if A[i] in m:   
                m[A[i]] += 1 
            else:
                m[A[i]] = 1
                
        for i in range(n):
            if B[i] in m:
                m[B[i]] -= 1
        
        for key in m:
            if m[key] != 0:  
                return -1   
        
        i, j = n-1, n-1
        res = 0
        while i >= 0 and j >= 0:
            while i >= 0 and A[i] != B[j]:
                res += 1  #
                i -= 1  
            i -= 1
            j -= 1
        
        return res 


Overall Time Complexity:
Counting frequencies: O(n)
Frequency check: O(n)
Backward scanning: O(n)
Other operations: O(1)
Total time complexity: O(n)
