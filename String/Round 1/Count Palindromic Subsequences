Count Palindromic Subsequences

number of palindromic subsequences (need not necessarily be distinct)

s = "abcd"
Output: 4
Explanation: 'a' ,'b', 'c' ,'d'

s = "aab"
Output: 4
Explanation: 'a', 'a', 'b', 'aa'

s = "b"
Output: 1
Explanation: 'b'


class Solution:
    def countPS(self, s):
        n = len(s)
        dp = [[0 for _ in range(n)] for _ in range(n)]

        for i in range(n):
            dp[i][i] = 1

        for length in range(2, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1
                if s[i] == s[j]:
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1
                else:
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]

        return dp[0][n - 1]
