Longest Substring Without Repeating Character

No. of Unique Character in s

s = "pwwkew"
Output: 3

Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

s = "abcabcbb"
Output: 3

s = "bbbbb"
Output: 1


class Solution(object):
    def lengthOfLongestSubstring(self, s):
        charSet = set()
        left = 0
        maxLength = 0

        for right in range(len(s)):
            while s[right] in charSet:
                charSet.remove(s[left])
                left += 1
            charSet.add(s[right])
            maxLength = max(maxLength, right - left + 1)
        
        return maxLength


Time Complexity - O(n)
Space Complexity- O(K)

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X

def fun(n,k,str):
    s=''.join(sorted(str))
    sum=0
    for i in range(n):
        sum+=(n-i)*(ord(s[i])-96)
    return sum


if __name__=="__main__":
    n=int(input())
    k=int(input())
    str=input()
    output=fun(n,k,str)
    print(output)


Time Complexity - O(n^2)
Space Complexity- O(n)
