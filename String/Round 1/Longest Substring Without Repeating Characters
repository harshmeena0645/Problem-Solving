Longest Substring Without Repeating Character

No. of Unique Character in s

s = "pwwkew"
Output: 3

Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

s = "abcabcbb"
Output: 3

s = "bbbbb"
Output: 1



s=input()
res=[]
maxx=0
for i in s:
    if i not in res:
        res.append(i)
        maxx=max(maxx,len(res))
    else:
        res=[i]
print(maxx)

--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        charSet = set()
        left = 0
        maxLength = 0

        for right in range(len(s)):
            while s[right] in charSet:
                charSet.remove(s[left])
                left += 1
            charSet.add(s[right])
            maxLength = max(maxLength, right - left + 1)
        
        return maxLength


Time Complexity - O(n)
Space Complexity- O(K)
