Longest Repeating Character Replacement

You can choose any character of the string and change it to any other. You can perform this operation at most k times.
Output is longest substring containing the same letter.

 
s = "ABAB", k = 2
Output: 4
Replace two 'A's with two 'B's or vice versa.

s = "AABABBA", k = 1
Output: 4 (AABBBBA)


#Brute Force
def characterReplacement(s, k):
    n = len(s)
    max_len = 0

    for i in range(n):
        freq = [0] * 26  # Frequency of A-Z
        max_count = 0
        for j in range(i, n):
            idx = ord(s[j]) - ord('A')
            freq[idx] += 1
            max_count = max(max_count, freq[idx])
            window_len = j - i + 1
            changes_needed = window_len - max_count
            if changes_needed <= k:
                max_len = max(max_len, window_len)

    return max_len




class Solution(object):
    def characterReplacement(self, s, k):
        count = [0] * 26
        left = 0
        max_count = 0
        result = 0

        for right in range(len(s)):
            index = ord(s[right]) - ord('A')
            count[index] += 1
            max_count = max(max_count, count[index])

            while (right - left + 1) - max_count > k:
                count[ord(s[left]) - ord('A')] -= 1
                left += 1

            result = max(result, right - left + 1)

        return result
