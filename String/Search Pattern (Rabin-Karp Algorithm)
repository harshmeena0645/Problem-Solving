Search Pattern (Rabin-Karp Algorithm)

Given two strings:

A text string in which you want to search.

A pattern string that you are looking for within the text.

Return all positions (1-based indexing) where the pattern occurs as a substring in the text. If the pattern does not occur, return an empty list.

All characters in both strings are lowercase English letters (a to z).

Examples:

Input: text = "birthdayboy", pattern = "birth"
Output: [1]
Explanation: The string "birth" occurs at index 1 in text.
Input: text = "geeksforgeeks", pattern = "geek"
Output: [1, 9]
Explanation: The string "geek" occurs twice in text, one starts are index 1 and the other at index 9.


class Solution:
    def search(self, pat, txt):
        m = len(pat)
        n = len(txt)
        
        if m > n:
            return []
        
        base = 26
        mod = 10**9 + 7
        
        high_pow = 1
        for _ in range(m - 1):
            high_pow = (high_pow * base) % mod
        
        pat_hash = 0
        window_hash = 0
        
        for i in range(m):
            pat_hash = (pat_hash * base + (ord(pat[i]) - ord('a'))) % mod
            window_hash = (window_hash * base + (ord(txt[i]) - ord('a'))) % mod
        
        result = []
        
        for i in range(n - m + 1):
            if pat_hash == window_hash:
                if txt[i:i+m] == pat:
                    result.append(i + 1)  
            
            if i < n - m:
                window_hash = (window_hash - (ord(txt[i]) - ord('a')) * high_pow) % mod
                window_hash = (window_hash * base + (ord(txt[i + m]) - ord('a'))) % mod
                window_hash = (window_hash + mod) % mod
        
        return result



Time Complexity:
Average: O(n + m), where n is length of text and m is length of pattern.

Worst case (due to hash collisions and verification): O(n*m) but very rare with good hash.
