Minimum Window Substring



Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Input: s = "a", t = "a"
Output: "a"

Input: s = "a", t = "aa"
Output: ""




# Brute force 
from collections import Counter

def contains_all_chars(substring, t_count):
    s_count = Counter(substring)
    for char in t_count:
        if s_count[char] < t_count[char]:
            return False
    return True

def min_window(s, t):
    if not s or not t:
        return ""

    n = len(s)
    t_count = Counter(t)
    min_len = float('inf')
    result = ""

    for i in range(n):
        for j in range(i, n):
            window = s[i:j+1]
            if contains_all_chars(window, t_count):
                if (j - i + 1) < min_len:
                    min_len = j - i + 1
                    result = window

    return result





from collections import Counter
class Solution:
    def minWindow(self,s,t):
        if not t or not s:
            return ""
        t_count = Counter(t)
        required = len(t_count)

        left = 0
        right = 0

        formed = 0
        window_counts = {}

        # (window_length, left, right)
        ans = float("inf"), None, None

        while right < len(s):
            char = s[right]
            window_counts[char] = window_counts.get(char, 0) + 1

            if char in t_count and window_counts[char] == t_count[char]:
                formed += 1

            while left <= right and formed == required:
                if right - left + 1 < ans[0]:
                    ans = (right - left + 1, left, right)

                char = s[left]
                window_counts[char] -= 1
                if char in t_count and window_counts[char] < t_count[char]:
                    formed -= 1

                left += 1

            right += 1

        return "" if ans[0] == float("inf") else s[ans[1]:ans[2]+1]
