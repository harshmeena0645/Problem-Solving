Wildcard string matching

* --> Can be replaced by any sequence of characters,and empty string
? --> Can be replaced by any one character
 
wild = ge*ks
pattern = geeks
Output: Yes
Explanation: Replace the '*' in wild string 
with 'e' to obtain pattern "geeks".

wild = ge?ks*
pattern = geeksforgeeks
Output: Yes
Explanation: Replace '?' and '*' in wild string with
'e' and 'forgeeks' respectively



# Brute Force
def is_match(wild, pattern):
    def match(i, j):
        if i == len(wild) and j == len(pattern):
            return True
        if i == len(wild):
            return False
        if j == len(pattern):
            return all(wild[k] == '*' for k in range(i, len(wild)))

        if wild[i] == '*':
            return match(i + 1, j) or match(i, j + 1)
        if wild[i] == '?' or wild[i] == pattern[j]:
            return match(i + 1, j + 1)

        return False

    return match(0, 0)






class Solution:
    def match(self, wild, pattern):
        i = 0 
        j = 0 
        star_idx = -1
        match = 0
        n, m = len(wild), len(pattern)
        
        while j < m:
            if i < n and (wild[i] == pattern[j] or wild[i] == '?'):
                i += 1
                j += 1
            elif i < n and wild[i] == '*':
                star_idx = i
                match = j
                i += 1
            elif star_idx != -1:
                i = star_idx + 1
                match += 1
                j = match
            else:
                return False
        
        while i < n and wild[i] == '*':
            i += 1
        
        return i == n



Expected Time Complexity: O(length of wild string * length of pattern string)
Expected Auxiliary Space: O(length of wild string * length of pattern string)