Longest Palindromic Substring

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Input: s = "cbbd"
Output: "bb"


# Brute force
def is_palindrome(s):
    return s == s[::-1]

def longest_palindromic_substring(s):
    n = len(s)
    max_len = 0
    longest = ""

    for i in range(n):
        for j in range(i, n):
            substring = s[i:j+1]
            if is_palindrome(substring) and len(substring) > max_len:
                longest = substring
                max_len = len(substring)

    return longest




class Solution(object):
    def longestPalindrome(self, s):
        res = ""
        for i in xrange(len(s)):
            tmp = self.helper(s, i, i)
            if len(tmp) > len(res):
                res = tmp
            tmp = self.helper(s, i, i+1)
            if len(tmp) > len(res):
                res = tmp
        return res

    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1; r += 1
        return s[l+1:r]



| Metric           | Value    |
| ---------------- | -------- |
| Time Complexity  | O(nÂ²)    |
| Space Complexity | O(1) aux |
