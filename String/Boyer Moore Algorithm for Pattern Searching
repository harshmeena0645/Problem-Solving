Boyer Moore Algorithm for Pattern Searching

txt[] = "THIS IS A TEST TEXT"
pat[] = "TEST"
Output: Pattern found at index 10

txt[] =  "AABAACAADAABAABA"
pat[] =  "AABA"
Output: Pattern found at index 0
        Pattern found at index 9
        Pattern found at index 12



NO_OF_CHARS = 256
def badCharHeuristic(pat):
    badChar = [-1] * NO_OF_CHARS
    for i in range(len(pat)):
        badChar[ord(pat[i])] = i
    return badChar

def search(txt, pat):
    m = len(pat)
    n = len(txt)
    badChar = badCharHeuristic(pat)

    s = 0
    while s <= n - m:
        j = m - 1

        while j >= 0 and pat[j] == txt[s + j]:
            j -= 1

        if j < 0:
            print("Pattern found at index", s)
            s += m - badChar[ord(txt[s + m])] if s + m < n else 1
        else:
            s += max(1, j - badChar[ord(txt[s + j])])

search("ABAAABCD", "ABC")


ðŸ•’ Time Complexity:
Best case: O(n/m)
Worst case: O(mn), but in practice it performs much better than naive search.
