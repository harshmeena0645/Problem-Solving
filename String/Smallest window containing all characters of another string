Smallest window containing all characters of another string
 

s1 = "timetopractice", s2 = "toc"
Output: "toprac"
"toprac" is the smallest substring in which "toc" can be found

s1 = "zoomlazapzo", s2 = "oza"
Output: "apzo"
"apzo" is the smallest substring in which "oza" can be found

s1 = "zoom", s2 = "zooe"
Output: ""
No window is present containing all characters of s2


class Solution:
    def smallestWindow(self, s, p):
        p_freq = {}
        for char in p:
            p_freq[char] = p_freq.get(char, 0) + 1

        required = len(p_freq) 
        window_freq = {}
        formed = 0  
        left = 0  
        min_len = float('inf') 
        start = -1

        for right in range(len(s)):
            char = s[right]
            window_freq[char] = window_freq.get(char, 0) + 1

            if char in p_freq and window_freq[char] == p_freq[char]:
                formed += 1

            while formed == required:
                if right - left + 1 < min_len:
                    min_len = right - left + 1
                    start = left

                window_freq[s[left]] -= 1
                if s[left] in p_freq and window_freq[s[left]] < p_freq[s[left]]:
                    formed -= 1
                left += 1

        if start == -1:
            return "-1"

        return s[start:start + min_len]


✅ Time Complexity: O(|s| + |p|)
✅ Space Complexity: O(1)
