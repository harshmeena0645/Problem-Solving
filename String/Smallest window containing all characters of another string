Smallest window containing all characters of another string

Given two strings s1 and s2. Find the smallest window in the string s1 consisting of all the characters(including duplicates) of the string s2. Return "" in case no such window is present. If there are multiple such windows of the same length, return the one with the least starting index.
Note: All characters are in lowercase letters. 

Examples:

Input: s1 = "timetopractice", s2 = "toc"
Output: "toprac"
Explanation: "toprac" is the smallest substring in which "toc" can be found.
Input: s1 = "zoomlazapzo", s2 = "oza"
Output: "apzo"
Explanation: "apzo" is the smallest substring in which "oza" can be found.
Input: s1 = "zoom", s2 = "zooe"
Output: ""
Explanation: No window is present containing all characters of s2.


class Solution:
    
    def smallestWindow(self, s, p):
        p_freq = {}
        for char in p:
            p_freq[char] = p_freq.get(char, 0) + 1

        required = len(p_freq) 
        window_freq = {}
        formed = 0  
        left = 0  
        min_len = float('inf') 
        start = -1

        for right in range(len(s)):
            char = s[right]
            window_freq[char] = window_freq.get(char, 0) + 1

            if char in p_freq and window_freq[char] == p_freq[char]:
                formed += 1

            while formed == required:
                if right - left + 1 < min_len:
                    min_len = right - left + 1
                    start = left

                window_freq[s[left]] -= 1
                if s[left] in p_freq and window_freq[s[left]] < p_freq[s[left]]:
                    formed -= 1
                left += 1

        if start == -1:
            return "-1"

        return s[start:start + min_len]


✅ Time Complexity: O(|s| + |p|)
✅ Space Complexity: O(1)
