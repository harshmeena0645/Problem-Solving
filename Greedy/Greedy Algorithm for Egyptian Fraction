Greedy Algorithm for Egyptian Fraction

Every positive fraction can be represented as sum of unique unit fractions. A fraction is unit fraction if numerator is 1 and denominator is a positive integer, for example 1/3 is a unit fraction. Such a representation is called Egyptian Fraction as it was used by ancient Egyptians. 


Egyptian Fraction Representation of 
2/3 is 1/2 + 1/6
6/14 is 1/3 + 1/11 + 1/231
12/13 is 1/2 + 1/3 + 1/12 + 1/156



import math
def egyptianFraction(nr, dr):

    print("The Egyptian Fraction " +
          "Representation of {0}/{1} is".
                format(nr, dr), end="\n")
    ef = []
    while nr != 0:
        x = math.ceil(dr / nr)
        ef.append(x)
        nr = x * nr - dr
        dr = dr * x

    for i in range(len(ef)):
        if i != len(ef) - 1:
            print(" 1/{0} +" . 
                    format(ef[i]), end = " ")
        else:
            print(" 1/{0}" .
                    format(ef[i]), end = " ")

egyptianFraction(6, 14)




Time complexity: worst case, the algorithm will run for O(d) iterations, where d is the denominator of the input fraction.

Auxiliary Space: O(1)