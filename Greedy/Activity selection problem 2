Activity selection problem 2


You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time.
Input Format

First line start array size
Second line elements of start array
Third line finish array
Fourth line elements of finish array

Output Format
A person can perform at most how many activities

Sample Input 0
3
10 12 30
3
20 25 30
Sample Output 0
0 2
Explanation 0
Explanation: A person can perform at most two activities. The
maximum set of activities that can be executed
is {0, 2} [ These are indexes in start[] and finish[] ]


Sample Input 1
6
1 3 0 5 8 5
6
2 4 6 7 9 9
Sample Output 1
0 1 3 4
Explanation 1
Explanation: A person can perform at most four activities. The
maximum set of activities that can be executed
is {0, 1, 3, 4} [ These are indexes in start[] and finish[]


def max_act(n, start, finish):
    activities = [(start[i], finish[i], i) for i in range(n)]
    activities.sort(key=lambda x: x[1])  

    selected = []
    last_end_time = -1

    for s, f, index in activities:
        if s >= last_end_time:
            selected.append(index)
            last_end_time = f
    return selected

n = int(input())
start = list(map(int, input().split()))
m = int(input())
finish = list(map(int, input().split()))
print(*max_act(n, start, finish))
