Job Sequencing Problem

You are given two arrays: deadline[], and profit[], which represent a set of jobs, where each job is associated with a deadline, and a profit. Each job takes 1 unit of time to complete, and only one job can be scheduled at a time. You will earn the profit associated with a job only if it is completed by its deadline.

Your task is to find:

The maximum number of jobs that can be completed within their deadlines.
The total maximum profit earned by completing those jobs.
Examples :

Input: deadline[] = [4, 1, 1, 1], profit[] = [20, 10, 40, 30]
Output: [2, 60]
Explanation: Job1 and Job3 can be done with maximum profit of 60 (20+40).
Input: deadline[] = [2, 1, 2, 1, 1], profit[] = [100, 19, 27, 25, 15]
Output: [2, 127]
Explanation: Job1 and Job3 can be done with maximum profit of 127 (100+27).
Input: deadline[] = [3, 1, 2, 2], profit[] = [50, 10, 20, 30]
Output: [3, 100]
Explanation: Job1, Job3 and Job4 can be completed with a maximum profit of 100 (50 + 20 + 30).



class Solution:
    def jobSequencing(self, deadline, profit):
        n = len(deadline)
        jobs = []

        for i in range(n):
            jobs.append((profit[i], deadline[i]))

        jobs.sort(reverse=True)

        max_deadline = max(deadline)

        parent = [i for i in range(max_deadline + 1)]

        def find(slot):
            if parent[slot] == slot:
                return slot
            parent[slot] = find(parent[slot])
            return parent[slot]

        # Union function
        def merge(u, v):
            parent[u] = v

        count_jobs = 0
        total_profit = 0

        for p, d in jobs:
            # Find the latest available slot
            available_slot = find(min(d, max_deadline))
            if available_slot > 0:
                count_jobs += 1
                total_profit += p
                merge(available_slot, find(available_slot - 1))

        return [count_jobs, total_profit]


--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x


class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n + 1))

    def find(self, s):
        if self.parent[s] == s:
            return s
        self.parent[s] = self.find(self.parent[s])  # Path compression
        return self.parent[s]

    def merge(self, u, v):
        self.parent[v] = u


class Solution:
    def jobSequencing(self, deadline, profit):
        n = len(deadline)
        jobs = list(zip(deadline, profit))
        jobs.sort(key=lambda x: x[1], reverse=True)

        max_deadline = max(deadline)
        dsu = DisjointSet(max_deadline)

        count_jobs = 0
        max_profit = 0

        for d, p in jobs:
            available_slot = dsu.find(d)
            if available_slot > 0:
                dsu.merge(dsu.find(available_slot - 1), available_slot)
                count_jobs += 1
                max_profit += p

        return [count_jobs, max_profit]
