Find paths from corner cell to middle cell in maze

task is to find all paths from all four corner cells to the middle cell.
From any cell mat[i][j] with value n, you are allowed to move exactly n steps (North, South, East,West)
you can move to mat[i + n][j], mat[i - n][j], mat[i][j + n], or mat[i][j - n]


Input: mat[][] = 
[ [ 3, 5, 4, 4, 7, 3, 4, 6, 3 ]
  [ 6, 7, 5, 6, 6, 2, 6, 6, 2 ]
  [ 3, 3, 4, 3, 2, 5, 4, 7, 2 ]
  [ 6, 5, 5, 1, 2, 3, 6, 5, 6 ]
  [ 3, 3, 4, 3, 0, 1, 4, 3, 4 ]
  [ 3, 5, 4, 3, 2, 2, 3, 3, 5 ]
  [ 3, 5, 4, 3, 2, 6, 4, 4, 3 ]
  [ 3, 5, 1, 3, 7, 5, 3, 6, 4 ]
  [ 6, 2, 4, 3, 4, 5, 4, 5, 1 ] ]

Output: (0, 0)  (0, 3) (0, 7)  (6, 7) (6, 3) (3, 3) (3, 4) (5, 4) (5, 2) (1, 2) (1, 7) (7, 7) (7, 1) (2, 1) (2, 4) (4, 4)

Explanation: top left to the mid (4, 4).
From (0, 0) value 3 -> 3 steps Right (0, 3)
From (0, 3) value 4 -> 4 steps Right (0, 7)
From (0, 7) value 6 -> 6 steps Down (6, 7)
In the same way,(6, 7) -> (6, 3) -> (3, 3) -> (3, 4) -> (5, 4) -> (5, 2) -> (1, 2) -> (1, 7) -> (7, 7) -> (7, 1) -> (2, 1) -> (2, 4) -> (4, 4)

Using Backtracking
Time Complexity - (4 ^ (n ^ 2))
Space Complexity - O(n ^ 2)



mod = 1000000007

def findPathInMaze(mat):
    n = len(mat)
    res = []

    visited = [[0 for _ in range(n)] for _ in range(n)]

    corners = [[0, 0], [0, n - 1], [n - 1, 0], [n - 1, n - 1]]
    path = []

    for corner in corners:
        x = corner[0]
        y = corner[1]
        findPath(x, y, path, visited, res, mat)
    return res

def findPath(x, y, path, visited, res, mat):
    n = len(mat)
    if x < 0 or x >= n or y < 0 or y >= n:
        return

    if visited[x][y]:
        return

    visited[x][y] = 1

    path.append([x, y])

    if x == n // 2 and y == n // 2:
        res.append(path.copy())
        path.pop()
        visited[x][y] = 0
        return

    dir = [[1, 0], [-1, 0], [0, 1], [0, -1]]
    for i in range(4):
        u = x + dir[i][0] * mat[x][y]
        v = y + dir[i][1] * mat[x][y]
        findPath(u, v, path, visited, res, mat)

    path.pop()
    visited[x][y] = 0
