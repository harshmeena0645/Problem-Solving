Remove Invalid Parentheses


S = "()())()"
Output: ["(())()","()()()"]

S = "(a)())()"
Output: ["(a())()","(a)()()"]

S = ")("
Output: [""]

Time Complexity: O(2|S|)
Auxiliary Space: O(1)


from typing import List
class Solution:
    def removeInvalidParentheses(self, s):
        res = set()
        left_rem, right_rem = 0, 0
        for char in s:
            if char == '(':
                left_rem += 1
            elif char == ')':
                if left_rem > 0:
                    left_rem -= 1
                else:
                    right_rem += 1

        def isValid(expr):
            count = 0
            for ch in expr:
                if ch == '(':
                    count += 1
                elif ch == ')':
                    count -= 1
                    if count < 0:
                        return False
            return count == 0
        dfs(0, left_rem, right_rem, s, set())

        def dfs(index, left_rem, right_rem, expr, visited):
            if (index, left_rem, right_rem, expr) in visited:
                return
            visited.add((index, left_rem, right_rem, expr))

            if left_rem == 0 and right_rem == 0:
                if isValid(expr):
                    res.add(expr)
                return

            for i in range(index, len(expr)):
                if i != index and expr[i] == expr[i - 1]:
                    continue
                if expr[i] == '(' and left_rem > 0:
                    dfs(i, left_rem - 1, right_rem, expr[:i] + expr[i + 1:], visited)
                elif expr[i] == ')' and right_rem > 0:
                    dfs(i, left_rem, right_rem - 1, expr[:i] + expr[i + 1:], visited)

        return sorted(list(res)) if res else [""]
