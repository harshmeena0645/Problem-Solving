M-Coloring Problem

You are given an undirected graph consisting of V vertices and E edges represented by a list edges[][], along with an integer m. Your task is to determine whether it is possible to color the graph using at most m different colors such that no two adjacent vertices share the same color. Return true if the graph can be colored with at most m colors, otherwise return false.

Note: The graph is indexed with 0-based indexing.

Examples:

Input: V = 4, edges[][] = [[0, 1], [1, 3], [2, 3], [3, 0], [0, 2]], m = 3
Output: true
Explanation: It is possible to color the given graph using 3 colors, for example, one of the possible ways vertices can be colored as follows:

Vertex 0: Color 1
Vertex 1: Color 2
Vertex 2: Color 2
Vertex 3: Color 3
Input: V = 3, edges[][] = [[0, 1], [1, 2], [0, 2]], m = 2
Output: false
Explanation: It is not possible to color the given graph using only 2 colors because vertices 0, 1, and 2 form a triangle.


class Solution:
    def graphColoring(self, V, edges, m):
        # Step 1: Build the adjacency list
        graph = [[] for _ in range(V)]
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)

        colors = [0] * V  # color of each vertex, 0 means uncolored

        # Helper function to check if we can color vertex with a given color
        def isSafe(vertex, c):
            for neighbor in graph[vertex]:
                if colors[neighbor] == c:
                    return False
            return True

        # Recursive backtracking function to try coloring vertices
        def dfs(vertex):
            if vertex == V:
                return True  # All vertices colored successfully

            for c in range(1, m + 1):  # Try colors from 1 to m
                if isSafe(vertex, c):
                    colors[vertex] = c
                    if dfs(vertex + 1):
                        return True
                    colors[vertex] = 0  # Backtrack

            return False  # No valid color found

        return dfs(0)
