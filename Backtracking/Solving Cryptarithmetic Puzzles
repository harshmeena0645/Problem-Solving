Solving Cryptarithmetic Puzzles

Newspapers and magazines often have crypt-arithmetic puzzles of the form:

   SEND
+ MORE
--------
 MONEY
-------- 

0 to 9
all occurrences of a letter must be assigned the same digit
no digit can be assigned to more than one letter
print the three strings representing its solution.

If no possible solution exists --> -1 print
If multiple solutions exist, print any

a = "send", b = "more", sum = "money"
Output: 7531 0825 08356
2817, 0368, 03185 is also possible answer

Input: a = "s", b = "p", sum = "f"
Output: 2 1 3


def solvePuzzleHelper(a, b, sumStr, pos, carry, charToDigit, usedDigits):
    if pos >= len(sumStr):
        return carry == 0

    sumVal = carry
    if pos < len(a) and a[-(pos + 1)] in charToDigit:
        sumVal += charToDigit[a[-(pos + 1)]]
    if pos < len(b) and b[-(pos + 1)] in charToDigit:
        sumVal += charToDigit[b[-(pos + 1)]]

    sumChar = sumStr[-(pos + 1)]

    if sumChar in charToDigit:
        if charToDigit[sumChar] != sumVal % 10:
            return False
        return solvePuzzleHelper(a, b, sumStr, pos + 1, sumVal // 10, charToDigit, usedDigits)

    for digit in range(10):
        if not usedDigits[digit]:
            if digit == 0 and sumChar in firstLetters:
                continue
            charToDigit[sumChar] = digit
            usedDigits[digit] = True
            if solvePuzzleHelper(a, b, sumStr, pos + 1, sumVal // 10, charToDigit, usedDigits):
                return True
            del charToDigit[sumChar]
            usedDigits[digit] = False
    return False

def assignDigits(a, b, sumStr, index, order, charToDigit, usedDigits):
    if index == len(order):
        return solvePuzzleHelper(a, b, sumStr, 0, 0, charToDigit, usedDigits)

    ch = order[index]
    for digit in range(10):
        if not usedDigits[digit]:
            if digit == 0 and ch in firstLetters:
                continue
            charToDigit[ch] = digit
            usedDigits[digit] = True
            if assignDigits(a, b, sumStr, index + 1, order, charToDigit, usedDigits):
                return True
            del charToDigit[ch]
            usedDigits[digit] = False
    return False

def solvePuzzle(a, b, sumStr):
    global firstLetters
    charToDigit = {}
    usedDigits = [False] * 10
    uniqueChars = set()
    order = ""
    firstLetters = {a[0], b[0], sumStr[0]}

    for ch in a + b + sumStr:
        if ch not in uniqueChars:
            uniqueChars.add(ch)
            order += ch

    if len(order) > 10:
        return ["-1"]

    if assignDigits(a, b, sumStr, 0, order, charToDigit, usedDigits):
        x = "".join(str(charToDigit[ch]) for ch in a)
        y = "".join(str(charToDigit[ch]) for ch in b)
        z = "".join(str(charToDigit[ch]) for ch in sumStr)
        return [x, y, z]
    return ["-1"]




✅ Time Complexity
n = number of unique letters (at most 10)
k = number of digits to assign = n
We try all k! (factorial) digit assignments.

O(k!) = O(10!) = 3,628,800 (maximum 10 unique letters)

We do a linear check of addition → O(L) where L = max(len(a), len(b), len(sum)).

O(k! × L)
→ At worst: O(10! × L) → practically fast for puzzles with ≤10 letters.

✅ Space Complexity:
O(k) for the charToDigit map
O(10) for usedDigits boolean array
O(L) for recursive call stack in worst case
Space: O(k + L)
