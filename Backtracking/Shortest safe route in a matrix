Shortest safe route in matrix

Cells 0 --> landmines (marked as 0)
Cells 1 --> safe to traverse
Find shortest safe route from any cell in the leftmost column to any cell in the rightmost column.
Cannot move diagonally, and you must avoid both the landmines and their adjacent cells (up,down,left,right), as they are also unsafe.


mat = [1, 0, 1, 1, 1],
      [1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1],
      [1, 1, 1, 0, 1],
      [1, 1, 1, 1, 0]
Output: 
6


mat = [1, 1, 1, 1, 1],
      [1, 1, 0, 1, 1],
      [1, 1, 1, 1, 1]
Output: 
-1

from typing import List
from collections import deque
class Solution:
    def findShortestPath(self, mat):
        r, c = len(mat), len(mat[0])
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        safe = [[1 if mat[i][j] == 1 else 0 for j in range(c)] for i in range(r)]
        for i in range(r):
            for j in range(c):
                if mat[i][j] == 0:
                    for dx, dy in directions:
                        ni, nj = i + dx, j + dy
                        if 0 <= ni < r and 0 <= nj < c:
                            safe[ni][nj] = 0
                    safe[i][j] = 0

        q = deque()
        visited = [[False] * c for _ in range(r)]

        for i in range(r):
            if safe[i][0]:
                q.append((i, 0, 1))  # (row, col, steps)
                visited[i][0] = True

        while q:
            x, y, dist = q.popleft()

            if y == c - 1:
                return dist

            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < r and 0 <= ny < c:
                    if safe[nx][ny] and not visited[nx][ny]:
                        visited[nx][ny] = True
                        q.append((nx, ny, dist + 1))

        return -1



Time Complexity: O(r * c)
Auxiliary Space: O(r * c) 
