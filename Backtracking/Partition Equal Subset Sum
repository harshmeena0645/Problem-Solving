Partition Equal Subset Sum

arr = [1, 5, 11, 5]
Output: true
The two parts are [1, 5, 5] and [11]

arr = [1, 3, 5]
Output: false


Optimized Backtracking with Memoization (Top-down DP):
class Solution:
    def equalPartition(self, arr):
        total = sum(arr)
        if total % 2 != 0:
            return False
        target = total // 2
        n = len(arr)
        memo = {}

        def dfs(index, current_sum):
            if current_sum == target:
                return True
            if current_sum > target or index == n:
                return False
            if (index, current_sum) in memo:
                return memo[(index, current_sum)]

            include = dfs(index + 1, current_sum + arr[index])
            exclude = dfs(index + 1, current_sum)

            memo[(index, current_sum)] = include or exclude
            return memo[(index, current_sum)]

        return dfs(0, 0)
