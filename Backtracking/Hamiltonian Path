Hamiltonian Path

Given an undirected graph with n vertices and m edges, your task is to determine if a Hamiltonian path exists in the graph.

A Hamiltonian path is a path in an undirected graph that visits each vertex exactly once.

You are provided the following:


n: The number of vertices in the graph.
m: The number of edges in the graph.
edges[][]: A 2D list where each element edges[i] represents an edge between two vertices edges[i][0] and edges[i][1]. 
Examples:

Input: n = 4, m = 4
edges[][]= { {1,2}, {2,3}, {3,4}, {2,4} }
Output: 1 
Explanation: There is a hamiltonian path: 1 -> 2 -> 3 -> 4 
Input: n = 4, m = 3 
edges[][] = { {1,2}, {2,3}, {2,4} } 
Output: 0 
Explanation: It can be proved that there is no hamiltonian path in the given graph.


class Solution:
    def check(self, n, m, edges): 
        from collections import defaultdict

        # Build adjacency list
        graph = defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)
        
        # visited: bitmask to keep track of visited nodes
        def dfs(node, visited, count):
            if count == n:
                return True
            
            for nei in graph[node]:
                if not (visited & (1 << (nei - 1))):
                    if dfs(nei, visited | (1 << (nei - 1)), count + 1):
                        return True
            return False

        # Try DFS starting from each node
        for start in range(1, n + 1):
            visited = 1 << (start - 1)
            if dfs(start, visited, 1):
                return 1  # Hamiltonian path found

        return 0  # No Hamiltonian path
