All possible palindromic partitions of String

Every substring is a palindrome.
You return all possible ways to do this.

S = "geeks"
Output:
g e e k s
g ee k s

S = "madam"
Output:
m a d a m
m ada m
madam


class Solution:
    def allPalindromicPerms(self, S):
        res = []
        backtrack(0, [])
        
        def backtrack(start, path):
            if start == len(S):
                res.append(path[:])
                return
            for end in range(start + 1, len(S) + 1):
                prefix = S[start:end]
                if is_palindrome(prefix):
                    path.append(prefix)
                    backtrack(end, path)
                    path.pop()

        def is_palindrome(s):
            return s == s[::-1]

        return res



Time Complexity: O(N*2N)
Auxiliary Space: O(N2)
(N is the length of the String)
