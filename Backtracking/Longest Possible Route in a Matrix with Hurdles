Longest Possible Route in Matrix with Hurdles

N x M matrix
hurdles-->denoted by 0 
source(xs,ys) to a destination(xd,yd)
Move Up, Down, Left, Right Not Diagonal
If Not possible to reach the destination from the source return -1.


{xs,ys} = {0,0}
{xd,yd} = {1,7}
matrix = 1 1 1 1 1 1 1 1 1 1
         1 1 0 1 1 0 1 1 0 1
         1 1 1 1 1 1 1 1 1 1
Output: 24


{xs,ys} = {0,3}
{xd,yd} = {2,2}
matrix = 1 0 0 1 0
         0 0 0 1 0
         0 1 1 0 0
Output: -1


from typing import List
class Solution:
    if mat[xs][ys] == 0 or mat[xd][yd] == 0:
        return -1
    visited = [[False for _ in range(m)] for _ in range(n)]
    ans = dfs(xs, ys, visited, 0)
    return ans if ans != -1 else -1

    def longestPath(self, mat, n, m, xs, ys, xd, yd):
        dir_x = [-1, 1, 0, 0]
        dir_y = [0, 0, -1, 1]
        
        def is_valid(x, y, visited):
            return (0 <= x < n and 0 <= y < m and mat[x][y] == 1 and not visited[x][y])
        
        def dfs(x, y, visited, path_len):
            if x == xd and y == yd:
                return path_len
            
            max_len = -1
            visited[x][y] = True
            
            for d in range(4):
                nx = x + dir_x[d]
                ny = y + dir_y[d]
                if is_valid(nx, ny, visited):
                    length = dfs(nx, ny, visited, path_len + 1)
                    max_len = max(max_len, length)
            
            visited[x][y] = False
            return max_len
        


Time Complexity: O(2^(N*M))
Auxiliary Space: O(N*M)
