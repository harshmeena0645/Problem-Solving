Merge Sort for Linked List

Given a pointer/reference to the head of the linked list, the task is to sort the given linked list using Merge Sort.
Note: If the length of the linked list is odd, then the extra node should go into the first list while splitting.

Examples:

Input: LinkedList: 3->5->2->4->1
Output: 1->2->3->4->5
Explanation: After sorting the given linked list, the resultant matrix will be 1->2->3->4->5.

Input: LinkedList: 9->15->0
Output: 0->9->15
Explanation: After sorting the given linked list , resultant will be 0->9->15.

Expected Time Complexity: O(n*log(n))
Expected Auxiliary Space: O(n)


class Solution:
    #Function to sort the given linked list using Merge Sort.
    def mergeSort(self, head):
        # code here
        if not head or not head.next:
            return head

        # 1. Split the list into two halves
        middle = self.getMiddle(head)
        next_to_middle = middle.next
        middle.next = None

        # 2. Recursively sort the two halves
        left = self.mergeSort(head)
        right = self.mergeSort(next_to_middle)

        # 3. Merge the sorted halves
        sorted_list = self.merge(left, right)
        return sorted_list

    def getMiddle(self, head):
        if not head:
            return head

        slow = head
        fast = head

        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next

        return slow

    def merge(self, left, right):
        if not left:
            return right
        if not right:
            return left

        result = None

        if left.data <= right.data:
            result = left
            left = left.next
        else:
            result = right
            right = right.next

        curr = result

        while left and right:
            if left.data <= right.data:
                curr.next = left
                left = left.next
            else:
                curr.next = right
                right = right.next
            curr = curr.next

        if left:
            curr.next = left
        if right:
            curr.next = right

        return result
