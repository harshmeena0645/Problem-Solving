Reverse a Doubly Linked List

Given a doubly linked list. Your task is to reverse the doubly linked list and return its head.

Examples:

Input: LinkedList: 3 <-> 4 <-> 5
Output: 5 <-> 4 <-> 3

Input: LinkedList: 75 <-> 122 <-> 59 <-> 196
Output: 196 <-> 59 <-> 122 <-> 75

Expected Time Complexity: O(n).
Expected Auxiliary Space: O(1).



class Solution:
    def reverseDLL(self, head):
        # If the list is empty or has one node, it's already reversed
        if not head or not head.next:
            return head

        current = head
        prev_node = None

        while current:
            # Swap the next and prev pointers
            current.prev, current.next = current.next, current.prev
            
            # Move prev_node to current before moving current forward
            prev_node = current
            current = current.prev  # since next and prev are swapped

        # After the loop, prev_node will be the new head
        return prev_node
