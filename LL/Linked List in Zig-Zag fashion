Linked List in Zig-Zag fashion

Given a Linked list head, rearrange it such that the converted list should be of the form a <= b >= c <= d >= e <= f .. where a, b, c are consecutive data nodes of the linked list and such that the order of linked list is sustained.

For example: In 11 15 20 5 10 we consider only 11 20 5 15 10 because it satisfies the above condition and the order of the linked list. 5 20 11 15 10 is not considered as it does not follow the order of the linked list.

To maintain the order, keep swapping the adjacent nodes of the linked list (whenever required) to get the desired output. 

Note: You have to return the head to Zig-Zag LinkedList, and the driver code will print "true" if your LinkedList is Zig-Zag else it will print "false".

Input: LinkedList: 1->2->3->4 
Output: true
Explanation:

Input: LinkedList: 11->15->20->5->10
Output: true
Explanation: 
In the given linked list, after arranging them as 11 < 20 > 5 < 15 > 10 in the pattern as asked above.


class Solution:
    def zigzag(self, head_node):
        if not head_node or not head_node.next:
            return head_node

        # This flag indicates the expected relation:
        # True means a <= b, False means a >= b
        flag = True
        current = head_node

        while current and current.next:
            if flag:
                # Expect current.data <= current.next.data
                if current.data > current.next.data:
                    current.data, current.next.data = current.next.data, current.data
            else:
                # Expect current.data >= current.next.data
                if current.data < current.next.data:
                    current.data, current.next.data = current.next.data, current.data

            # Flip the expected relation for next pair
            flag = not flag
            current = current.next

        return head_node
