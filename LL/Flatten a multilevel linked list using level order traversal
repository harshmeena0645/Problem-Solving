Flatten a multilevel linked list using level order traversal

Given a linked list where in addition to the next pointer, each node has a child pointer, which may or may not point to a separate list. These child lists may have one or more children of their own to produce a multilevel linked list. Given the head of the first level of the list. The task is to flatten the list so that all the nodes appear in a single-level linked list. Flatten the list in a way that all nodes at the first level should come first, then nodes of the second level, and so on.


Input: 
2_5
Output: 1->4->6->2->5->7->3->8
Explanation: The multilevel linked list is flattened as it has no child pointers.



class Node:
    def __init__(self, new_value):
        self.data = new_value
        self.next = None
        self.child = None

def flatten_list(head):
    if head is None:
        return
    tail = head
    while tail.next is not None:
        tail = tail.next 
    curr = head

    while curr != None:
        if curr.child is not None:
            tail.next = curr.child
            tmp = curr.child
            while tmp.next is not None:
                tmp = tmp.next
            tail = tmp
            curr.child = None

        curr = curr.next

def print_list(head):
    curr = head
    while curr is not None:
        print(curr.data, end=" ")
        curr = curr.next
    print()

if __name__ == "__main__":
    head = Node(1)
    head.next = Node(2)
    head.next.next = Node(3)
    head.child = Node(4)
    head.child.next = Node(5)
    head.next.next.child = Node(6)
    head.child.child = Node(7)

    flatten_list(head)
    print_list(head)


Output
1 2 3 4 5 6 7 
Time Complexity: O(n), where n is the number of nodes in the list.
Auxiliary Space: O(1)
