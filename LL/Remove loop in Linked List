Remove loop in Linked List

A loop means that the last node of the linked list is connected back to a node in the same list.
A head of a singly linked list and a pos (1-based index) which denotes the position of the node to which the last node points to. If pos = 0, it means the last node points to null, indicating there is no loop.


Input: head = 1 -> 3 -> 4, pos = 2
Output: true

Input: head = 1 -> 8 -> 3 -> 4, pos = 0
Output: true

Input: head = 1 -> 2 -> 3 -> 4, pos = 1
Output: true


class Solution:
    def removeLoop(self, head):
        slow = head
        fast = head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                break
        else:
            return

        slow = head
        if slow == fast:
            while fast.next != slow:
                fast = fast.next
        else:
            while slow.next != fast.next:
                slow = slow.next
                fast = fast.next

        fast.next = None
