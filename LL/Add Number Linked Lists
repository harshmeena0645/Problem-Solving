Add Number Linked Lists

Given the head of two singly linked lists num1 and num2 representing two non-negative integers. The task is to return the head of the linked list representing the sum of these two numbers.

For example, num1 represented by the linked list : 1 -> 9 -> 0, similarly num2 represented by the linked list: 2 -> 5. Sum of these two numbers is represented by 2 -> 1 -> 5.

Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.

Examples:

Input: num1 = 4 - > 5, num2 = 3 -> 4 -> 5
Output:  3 -> 9 -> 0
 
Explanation: Given numbers are 45 and 345. There sum is 390.
Input: num1 = 0 -> 0 -> 6 -> 3, num2 = 0 -> 7 
Output: 7 -> 0 

Explanation: Given numbers are 63 and 7. There sum is 70.


class Solution:
    def addTwoLists(self, num1, num2):

        # Reverse both linked lists
        num1 = self.reverseList(num1)
        num2 = self.reverseList(num2)

        # Add the two lists
        carry = 0
        result_head = None
        result_tail = None

        while num1 or num2 or carry:
            sum_val = carry
            if num1:
                sum_val += num1.data
                num1 = num1.next
            if num2:
                sum_val += num2.data
                num2 = num2.next

            carry = sum_val // 10
            digit = sum_val % 10

            new_node = Node(digit)  # Assuming you have a Node class

            if not result_head:
                result_head = new_node
                result_tail = new_node
            else:
                result_tail.next = new_node
                result_tail = new_node

        # Reverse the result list
        result_head = self.reverseList(result_head)

        # Remove leading zeros
        while result_head and result_head.data == 0 and result_head.next:
            result_head = result_head.next

        return result_head

    def reverseList(self, head):
        prev = None
        curr = head
        while curr:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node
        return prev
