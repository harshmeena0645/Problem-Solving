Segregate even and odd nodes in a Linked List

Given a link list, modify the list such that all the even numbers appear before all the odd numbers in the modified list. The order of appearance of numbers within each segregation should be the same as that in the original list.

NOTE: Don't create a new linked list, instead rearrange the provided one.

Examples:

Input: Linked list: 17->15->8->9->2->4->6
Output: 8->2->4->6->17->15->9

Explaination: 8,2,4,6 are the even numbers so they appear first and 17,15,9 are odd numbers that appear later.
Input: Linked List: 1 -> 3 -> 5 -> 7
Output: 1->3->5->7

Explaination: There is no even number. So no need for modification.



class Solution:
    def divide(self, head):

        if not head:
            return None

        even_head = None
        even_tail = None
        odd_head = None
        odd_tail = None

        curr = head

        while curr:
            if curr.data % 2 == 0:
                if not even_head:
                    even_head = curr
                    even_tail = curr
                else:
                    even_tail.next = curr
                    even_tail = curr
            else:
                if not odd_head:
                    odd_head = curr
                    odd_tail = curr
                else:
                    odd_tail.next = curr
                    odd_tail = curr

            curr = curr.next

        # Connect even and odd lists
        if even_head:
            if odd_head:
                even_tail.next = odd_head
                odd_tail.next = None  # Important: Terminate the odd list
            else:
                even_tail.next = None # Terminate the even list
            return even_head
        else:
            if odd_head:
                odd_tail.next = None # Terminate the odd list
            return odd_head
