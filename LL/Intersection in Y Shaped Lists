Intersection in Y Shaped Lists

Given the head of two singly linked lists, return the point where these two linked lists intersect.

Note: It is guaranteed that the intersected node always exists.

Custom Input Format:

head1 contains the nodes before intersection in list1
head2 contains the nodes before intersection in list2
CommonList contains the nodes after intersection of list1 and list2.

Examples:

Input: head1 : 4 -> 4 -> 4 -> 4 -> 4, head2 : 4 -> 4 -> 4
 
Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4 -> 4 whose starting point is 4.
Input: head1 : 4 -> 1 -> 8 -> 4 -> 5, head2 : 5 -> 6 -> 1 -> 8 -> 4 -> 5
 
Output: 8
Explanation: From the above image, it is clearly seen that the common part is 8 -> 4 -> 5 whose starting point is 8.


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def intersetPoint(head1, head2):
    # Calculate lengths of both linked lists
    def get_length(head):
        length = 0
        while head:
            length += 1
            head = head.next
        return length
    
    len1 = get_length(head1)
    len2 = get_length(head2)
    
    # Calculate the difference
    if len1 > len2:
        longer, shorter = head1, head2
        diff = len1 - len2
    else:
        longer, shorter = head2, head1
        diff = len2 - len1
    
    # Move the pointer of the longer list `diff` nodes ahead
    for _ in range(diff):
        longer = longer.next
    
    # Traverse both lists simultaneously
    while longer and shorter:
        if longer == shorter:
            return longer.data  # Intersection point found
        longer = longer.next
        shorter = shorter.next
    
    return -1  # No intersection point found
