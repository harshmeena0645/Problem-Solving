n=int(input())
l=list(map(int,input().split()))
res=" ".join(map(str,s))

matrix = [list(map(int, input().split())) for _ in range(n)]
values = input().split()

list=['1', '2', '3', '4']
nums_back = [ int(num) for num in list ]

nums = [1, 2, 3, 4]
string_nums = [ str(num) for num in nums ]

# Input: "10 20 30"
values = input().split()  # → ['10', '20', '30']

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
Input Array :-

with space : 4 5 6 7
arr = list(map(int, input().split()))

No Space: 4567
num = input()
arr = [int(digit) for digit in num]

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
Input 2D Array :-

Row By Row:-
matrix = []
rows=3
for i in range(rows):
    print()
    row = list(map(int, input().split()))
    matrix.append(row)

rows=3
cols=2
print(f"Enter {rows * cols} elements separated by space:")
elements = list(map(int, input().split()))
matrix = []
idx = 0
for i in range(rows):
    row = []
    for j in range(cols):
        row.append(elements[idx])
        idx += 1
    matrix.append(row)

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
Reverse Array :-

arr.reverse()

reversed_arr = arr[::-1]

start = 0
end = len(arr) - 1
while start < end:
    temp = arr[start]
    arr[start] = arr[end]
    arr[end] = temp
    start += 1
    end -= 1

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
arr.sort()   (for list)
sorted(arr)    (for all)

Brute-force sort (Selection Sort)
n = len(arr)
for i in range(n):
    for j in range(i + 1, n):
        if arr[i] > arr[j]:
            temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
sum(arr)

total = 0
for value in arr:
    total += value

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
max(arr)
min(arr)

max_val = arr[0]
min_val = arr[0]
for value in arr:
    if value > max_val:
        max_val = value
    if value < min_val:
        min_val = value

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
Count Occurrence in Array :-

arr.count(4)

count = 0
for value in arr:
    if value == 4:
        count += 1

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
Join Array back to Number :-

int("".join(map(str, arr)))

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--
Convert Digit to String :-

str_arr = list(map(str, arr))

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--

class PrimeChecker:
    def __init__(self, number):
        self.number = number
    def is_prime(self):
        return True

if __name__ == "__main__":
    num = int(input("Enter a number: "))
    checker = PrimeChecker(num)
    if checker.is_prime():
        print(f"{num} is a Prime Number")
    else:
        print(f"{num} is NOT a Prime Number")

--X--X--X--X--X--X--X--X--X--X--X--X--X--X--

my_list = [1, 2, 3, 4]
my_list[0]       # returns 1
my_list[-1]      # returns 4

my_list[2] = 99     # [1, 2, 99, 4]
my_list.append(5)     # [1, 2, 3, 4, 5]
my_list.insert(1, 10)  # [1, 10, 2, 3, 4]
my_list.extend([6, 7])  # [1, 2, 3, 4, 6, 7]

my_list.remove(2)  # removes first occurrence of 2
del my_list[2]      (Delete by value)
my_list.pop(2)      (Delete by value)

len(my_list)
my_list.count(3)

my_list.reverse()     (reverse a list)
my_list[::-1]         (reverse a list)

my_list.sort()        # ascending
my_list.sort(reverse=True)  # descending

my_list.clear()  # []      (clear a list)
new_list = my_list.copy()      (Copy list)
new_list = my_list[:]          (Copy list)

3 in my_list  # True or False    (item exists in list)

squares = [x**2 for x in my_list]      (list comprehension to square all items)
evens = [x for x in my_list if x % 2 == 0]      (even numbers using list comprehension)

''.join(['h', 'e', 'l', 'l', 'o'])  # 'hello'     (list of characters to a string)

max(my_list)
min(my_list)
sum(my_list)

my_list[1:4]  # from index 1 to 3
my_list[::2]     # [1,3]     (2nd element in a list)
flat = [item for sublist in [[1,2],[3,4]] for item in sublist]      (flatten a nested list)

list(set(my_list))       (remove duplicates from a list)
[1, 2] * 3      # [1, 2, 1, 2, 1, 2]
my_list.index(3)         (find the index of an item)

if not my_list:          (check list is empty)
    print("Empty")

my_list[0], my_list[1] = my_list[1], my_list[0]        (Swap without 3rd variable)

for idx, val in enumerate(my_list):
    print(idx, val)

list(zip([1, 2], ['a', 'b']))  # [(1, 'a'), (2, 'b')]





🔥 Top Python Interview Questions

✅ Armstrong Number
153 → 1**3+5**3+3**3=153
9474 → 9**4+4**4+7**4+4**4 = 9474

2️⃣ Check Even or Odd

4️⃣ Swap Two Numbers

5️⃣ Count Frequency of Elements
arr = [1, 2, 2, 3, 1, 4, 2, 3, 5]
freq = {}
for num in arr:
    if num in freq:
        freq[num] += 1
    else:
        freq[num] = 1
for key, value in freq.items():
    print(key, ":", value)

freq = Counter(arr)
print(freq)

6️⃣ Reverse a String
s = "hello"
rev = s[::-1]

rev = ""
for ch in s:
    rev = ch + rev

rev = "".join(reversed(s))

9️⃣ Check Prime Number
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

🔟 Factorial of a Number
def factorial_rec(n):
    if n < 0:
        raise ValueError
    if n in (0, 1):
        return 1
    return n * factorial_rec(n - 1)

import math
print(math.factorial(5))  # 120

1️⃣1️⃣ Find Second Largest Number
By Sort then arr[-2]

1️⃣2️⃣ Check for Anagram
String is Equal or not (Alphabet order not matter)

1️⃣3️⃣ Reverse Each Word in a Sentence
sentence = "I love Python"
print(' '.join(word[::-1] for word in sentence.split()))  # Output: I evol nohtyP

1️⃣4️⃣ Find Missing Number in an Array (1 to N)
def missing_number(lst, n):
    total = n * (n + 1) // 2
    return total - sum(lst)
print(missing_number([1, 2, 4, 5], 5))  # Output: 3

1️⃣5️⃣ First Non-Repeating Character
def first_unique_char(s):
    for char in s:
        if s.count(char) == 1:
            return char
print(first_unique_char("aabbcde"))  # Output: c


1️⃣6️⃣ Find All Pairs with Given Sum
def find_pairs(lst, target):
    return [(x, y) for x in lst for y in lst if x + y == target and x < y]
print(find_pairs([1, 2, 3, 4, 5, 6], 7))  # Output: [(1, 6), (2, 5), (3, 4)]

1️⃣7️⃣ Armstrong Number
def is_armstrong(num):
    return num == sum(int(digit) ** 3 for digit in str(num))
print(is_armstrong(153))  # Output: True

1️⃣8️⃣ Merge Two Sorted Lists

1️⃣9️⃣ Longest Substring Without Repeating Characters
def longest_substring(s):
    char_set = set()
    left = max_len = 0
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_len = max(max_len, right - left + 1)
    return max_len

print(longest_substring("abcabcbb"))  # Output: 3

2️⃣0️⃣ Number of Islands in a Grid
def num_islands(grid):
    def dfs(i, j):
        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == '0':
            return
        grid[i][j] = '0'
        dfs(i+1, j)
        dfs(i-1, j)
        dfs(i, j+1)
        dfs(i, j-1)

    count = 0
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == '1':
                dfs(i, j)
                count += 1
    return count

print(num_islands([
    ["1", "1", "0", "0"],
    ["1", "1", "0", "0"],
    ["0", "0", "1", "0"],
    ["0", "0", "0", "1"]]))  # Output: 3
