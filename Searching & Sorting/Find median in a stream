Find median in a stream

Median - Sort then middle number  

arr[] = [5, 15, 1, 3, 2, 8]
Output: [5.0, 10.0, 5.0, 4.0, 3.0, 4.0] 
Explanation: 
1st element – 5 -> median = 5.0
2nd element – 5, 15 -> median = (5+15)/2 = 10.0 
3rd element – 5, 15, 1 -> median = 5.0
4th element – 5, 15, 1, 3 -> (3+5)/2 = 4.0
5th element – 5, 15, 1, 3, 2 -> median = 3.0
6th element – 5, 15, 1, 3, 2, 8 -> (3+5)/2 = 4.0

arr[] = [2, 2, 2, 2]
Output: [2.0, 2.0, 2.0, 2.0]
Explanation: 
1st  – 2 -> median = 2.0
2nd – 2, 2 -> median = (2+2)/2 = 2.0
3rd – 2, 2, 2 -> median= 2.0
4th – 2, 2, 2, 2 -> median = (2+2)/2 = 2.0



import heapq
class Solution:
    def getMedian(self, arr):
        max_heap = []
        min_heap = []
        medians = []
        for num in arr:
            heapq.heappush(max_heap, -num)

            heapq.heappush(min_heap, -heapq.heappop(max_heap))

            if len(min_heap) > len(max_heap):
                heapq.heappush(max_heap, -heapq.heappop(min_heap))

            if len(max_heap) == len(min_heap):
                median = (-max_heap[0] + min_heap[0]) / 2.0
            else:
                median = -max_heap[0] * 1.0

            medians.append(median)

        return medians
