def heapify(arr, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    if left < n and arr[left] > arr[largest]:
        largest = left

    if right < n and arr[right] > arr[largest]:
        largest = right

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heapSort(arr):
    n = len(arr)

    # Build max heap
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Extract elements one by one
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # swap
        heapify(arr, i, 0)

def findMinDiffWithHeapSort(arr, m):
    n = len(arr)
    if m == 0 or n == 0 or m > n:
        return 0

    heapSort(arr)  # Sort the array using heap sort

    min_diff = float('inf')
    for i in range(n - m + 1):
        diff = arr[i + m - 1] - arr[i]
        min_diff = min(min_diff, diff)

    return min_diff

# Example usage:
arr = [7, 3, 2, 4, 9, 12, 56]
m = 3
print("Minimum difference is:", findMinDiffWithHeapSort(arr, m))


Output:-
Minimum difference is: 2

Time Complexity:-
Building the heap: O(n)
Extracting elements: O(n log n)
