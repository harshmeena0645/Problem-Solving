Minimum Swaps to Sort

Given an array arr[] of distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.

Examples:

Input: arr[] = [2, 8, 5, 4]
Output: 1
Explanation: Swap 8 with 4 to get the sorted array.
Input: arr[] = [10, 19, 6, 3, 5]
Output: 2
Explanation: Swap 10 with 3 and 19 with 5 to get the sorted array.
Input: arr[] = [1, 3, 4, 5, 6]
Output: 0
Explanation: Input array is already sorted.



class Solution:
    def minSwaps(self, arr):
        n = len(arr)
        ans = 0
        
        # Pair value with original index
        arr_pos = list(enumerate(arr))
        arr_pos.sort(key=lambda x: x[1])  # sort by values
        
        visited = [False] * n
        
        for i in range(n):
            # If already visited or already in the correct position
            if visited[i] or arr_pos[i][0] == i:
                continue

            cycle_size = 0
            j = i
            
            # Follow the cycle
            while not visited[j]:
                visited[j] = True
                j = arr_pos[j][0]
                cycle_size += 1
            
            if cycle_size > 0:
                ans += (cycle_size - 1)
        
        return ans
