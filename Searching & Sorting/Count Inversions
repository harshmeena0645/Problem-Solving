Count Inversions

If arr[i] > arr[j] and i < j.


arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).

arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.

arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.


class Solution:
    def inversionCount(self, arr):
        def mergeSort(arr):
            if len(arr) <= 1:
                return arr, 0

            mid = len(arr) // 2
            left, inv_left = mergeSort(arr[:mid])
            right, inv_right = mergeSort(arr[mid:])
            merged, inv_merge = merge(left, right)

            return merged, inv_left + inv_right + inv_merge

        def merge(left, right):
            result = []
            i = j = inv_count = 0

            while i < len(left) and j < len(right):
                if left[i] <= right[j]:
                    result.append(left[i])
                    i += 1
                else:
                    result.append(right[j])
                    inv_count += len(left) - i  
                    j += 1

            result.extend(left[i:])
            result.extend(right[j:])
            return result, inv_count

        _, total_inversions = mergeSort(arr)
        return total_inversions
