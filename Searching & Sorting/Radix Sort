Radix Sort


N = 4
arr[] = {1, 9, 345, 2}
Output: 1 2 9 345

N = 10
arr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
Output: 1 2 3 4 5 6 7 8 9 10 


def countingSort(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10  # Because digits range from 0 to 9

    # Count occurrences of digits
    for i in range(n):
        index = (arr[i] // exp) % 10
        count[index] += 1

    # Update count[i] so it contains actual positions
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Build the output array
    i = n - 1
    while i >= 0:
        index = (arr[i] // exp) % 10
        output[count[index] - 1] = arr[i]
        count[index] -= 1
        i -= 1

    # Copy output array to arr[]
    for i in range(n):
        arr[i] = output[i]

def radixSort(arr, n):
    # Find the maximum number to know number of digits
    max1 = max(arr)

    # Apply counting sort to each digit (unit, tens, hundreds,...)
    exp = 1
    while max1 // exp > 0:
        countingSort(arr, exp)
        exp *= 10



Time Complexity: O(N * K)
Auxiliary Space: O(N + K)
