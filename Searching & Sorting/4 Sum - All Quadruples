4 Sum - All Quadruples

Given an array arr[] of integers and another integer target. Find all unique quadruples from the given array that sums up to target.

Note: All the quadruples should be internally sorted, ie for any quadruple [q1, q2, q3, q4] it should be : q1 <= q2 <= q3 <= q4.

arr[] = [0, 0, 2, 1, 1], target = 3
Output: [0, 0, 1, 2] 
Explanation: Sum of 0, 0, 1, 2 is equal to 3.

arr[] = [10, 2, 3, 4, 5, 7, 8], target = 23
Output: [[2, 3, 8, 10], [2, 4, 7, 10], [3, 5, 7, 8]] 
Explanation: Sum of 2, 3, 8, 10 is 23, sum of 2, 4, 7, 10 is 23 and sum of 3, 5, 7, 8 is also 23.

arr[] = [0, 0, 2, 1, 1], target = 2
Output: [0, 0, 1, 1] 
Explanation: Sum of 0, 0, 1, 1 is equal to 2.


class Solution:
    def fourSum(self, arr, target):
        arr.sort()
        n = len(arr)
        res = []

        for i in range(n):
            if i > 0 and arr[i] == arr[i-1]:
                continue  # Skip duplicates for i
            for j in range(i+1, n):
                if j > i+1 and arr[j] == arr[j-1]:
                    continue  # Skip duplicates for j
                left = j + 1
                right = n - 1
                while left < right:
                    total = arr[i] + arr[j] + arr[left] + arr[right]
                    if total == target:
                        res.append([arr[i], arr[j], arr[left], arr[right]])
                        # Skip duplicates
                        while left < right and arr[left] == arr[left + 1]:
                            left += 1
                        while left < right and arr[right] == arr[right - 1]:
                            right -= 1
                        left += 1
                        right -= 1
                    elif total < target:
                        left += 1
                    else:
                        right -= 1
        return res
