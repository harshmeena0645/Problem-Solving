Minimum Window Substring

Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:
Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:
Input: s = "a", t = "aa"
Output: ""


Code-1:
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if not t or not s:
            return ""
        
        need = {}                       # Dictionary to store character frequency of t
        for char in t:
            need[char] = need.get(char, 0) + 1
        
        missing = len(t)                  # Total number of characters we need to match
        start, end = 0, 0                       # Start and end indices of the minimum window
        i = 0                               # Left pointer of the window
        
        for j in range(1, len(s) + 1):        # Iterate over s with 1-based index
            char = s[j - 1]
            if char in need and need[char] > 0:
                missing -= 1                    # Reduce missing count when we match a needed character
            need[char] = need.get(char, 0) - 1         # Reduce count in the need dictionary
            
            if missing == 0:                             # When we have matched all characters in t
                while i < j and need.get(s[i], 0) < 0:          # Try to minimize the window
                    need[s[i]] += 1                       # Restore character count
                    i += 1                                 # Move left pointer forward
                
                need[s[i]] += 1                               # Restore the first matched character
                missing += 1                                  # Mark it as missing again
                
                if end == 0 or j - i < end - start:           # Update the minimum window
                    start, end = i, j
                
                i += 1                                          # Move left pointer forward for the next possible window
        
        return s[start:end]
