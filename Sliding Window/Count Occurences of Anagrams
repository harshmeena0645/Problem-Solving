Count Occurences of Anagrams

txt = "forxxorfxdofr", pat = "for"
Output: 3
Explanation: for, orf and ofr appears in the txt, hence answer is 3.

txt = "aabaabaa", pat = "aaba"
Output: 4


class Solution:
    def search(self, pat, txt):
        p = len(pat)
        t = len(txt)
        if p > t:
            return 0
        result = 0

        def build_map(s):
            d = {}
            for ch in s:
                if ch in d:
                    d[ch] += 1
                else:
                    d[ch] = 1
            return d

        pat_map = build_map(pat)
        freq_map = build_map(txt[:p])

        # Compare first window
        if freq_map == pat_map:
            result += 1

        # Slide the window
        for i in range(p,t):
            new = txt[i]
            old = txt[i - p]

            # Add new
            if new in freq_map:
                freq_map[new] += 1
            else:
                freq_map[new] = 1

            # Remove old
            freq_map[old] -= 1
            if freq_map[old] == 0:
                del freq_map[old]

            if freq_map == pat_map:
                result += 1

        return result

**Time Complexity:** `O(t * k)`, where `t = len(txt)` and
`k` is the number of unique characters.

--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x
from collections import Counter

class Solution:
    def search(self, pat, txt):
        p = len(pat)
        t = len(txt)
        if p > t:
            return 0

        result = 0
        pat_map = Counter(pat)
        window_map = Counter(txt[:p])

        if window_map == pat_map:
            result += 1

        for i in range(p, t):
            new = txt[i]
            old = txt[i - p]

            window_map[new] += 1
            window_map[old] -= 1

            if window_map[old] == 0:
                del window_map[old]

            if window_map == pat_map:
                result += 1

        return result

Time complexity:- O(t Ã— k) in worst case
