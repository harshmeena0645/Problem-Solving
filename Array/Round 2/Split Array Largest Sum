Split Array Largest Sum

Split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.
A subarray is a contiguous part of the array.

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.


class Solution:
    def splitArray(self, nums, k):
        low, high = max(nums), sum(nums)
        ans = high
        while low <= high:
            mid = (low + high) // 2
            if self.is_feasible(nums, mid, k):
                ans = mid
                high = mid - 1
            else:
                low = mid + 1
        return ans
    
    def is_feasible(self, nums, max_sum, k):
        count = 1
        current_sum = 0
        for num in nums:
            current_sum += num
            if current_sum > max_sum:
                count += 1
                current_sum = num
                if count > k:
                    return False
        return True
