Pair Sum in a Sorted and Rotated Array

Given an array of positive elements arr[] that is sorted and then rotated around an unknown point, the task is to check if the array has a pair with sum equals to a given target.

Examples:

Input: arr[] = [7, 9, 1, 3, 5], target = 6
Output: true
Explanation: arr[2] and arr[4] has sum equals to 6 which is equal to the target.
Input: arr[] = [2, 3, 4, 1], target = 3
Output: true
Explanation: arr[0] and arr[3] has sum equals to 3 which is equal to the target.
Input: arr[] = [10, 7, 4, 1], target = 9
Output: false
Explanation: There is no such pair exists in arr[] which sums to target.


def pairInSortedRotated(arr, target):
    n = len(arr)
    
    # Step 1: Find the pivot (smallest element)
    for i in range(n-1):
        if arr[i] > arr[i+1]:
            break
    else:
        i = -1  # array is not rotated
    
    left = (i + 1) % n  # smallest element index
    right = i           # largest element index
    
    # Step 2: Use two-pointer to find pair with given sum
    while left != right:
        current_sum = arr[left] + arr[right]
        
        if current_sum == target:
            return True
        
        if current_sum < target:
            left = (left + 1) % n
        else:
            right = (right - 1 + n) % n
    
    return False


Complexity:
Time Complexity: O(n) — at most one full pass around the array with two pointers.
Space Complexity: O(1) — constant extra space.
