Kth Smallest

arr[] = [7, 10, 4, 3, 20, 15], k = 3
Output: 7

arr[] = [2, 3, 1, 20, 15], k = 4 
Output: 15


class Solution:
    def kthSmallest(self, arr, k):
        def quickSelect(arr, low, high, k):
            if low <= high:
                pivot_index = partition(arr, low, high)
                if pivot_index == k - 1:
                    return arr[pivot_index]
                elif pivot_index > k - 1:
                    return quickSelect(arr, low, pivot_index - 1, k)
                else:
                    return quickSelect(arr, pivot_index + 1, high, k)

        def partition(arr, low, high):
            pivot = arr[high]
            i = low
            for j in range(low, high):
                if arr[j] < pivot:
                    arr[i], arr[j] = arr[j], arr[i]
                    i += 1
            arr[i], arr[high] = arr[high], arr[i]
            return i

        return quickSelect(arr, 0, len(arr) - 1, k)


⏱ Time Complexity:
Average: O(n)
Worst-case: O(n²) (very rare, depends on pivot choice)
