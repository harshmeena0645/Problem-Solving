3 Sum
# Two-Pointer approach

return triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k
nums[i] + nums[j] + nums[k] == 0.
Not allowed duplicate
Order of triplets not matter

nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

nums = [0,1,1]
Output: []

nums = [0,0,0]
Output: [[0,0,0]]



def threeSum(nums):
    nums.sort()
    result = []
    
    for i in range(len(nums)):
        # Skip duplicate values for i
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        
        left, right = i + 1, len(nums) - 1
        
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            
            if total == 0:
                result.append([nums[i], nums[left], nums[right]])
                
                # Skip duplicates for left and right
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                
                left += 1
                right -= 1
                
            elif total < 0:
                left += 1
            else:
                right -= 1
                
    return result


Time Complexity:
Sorting: O(n log n)
The two-pointer iteration: O(n²)
Overall: O(n²)
