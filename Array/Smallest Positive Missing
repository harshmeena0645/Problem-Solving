Smallest Positive Missing

Input: arr[] = [2, -3, 4, 1, 1, 7]
Output: 3
Explanation: Smallest positive missing number is 3.

Input: arr[] = [5, 3, 2, 5, 1]
Output: 4
Explanation: Smallest positive missing number is 4.

Input: arr[] = [-8, 0, -1, -4, -3]
Output: 1
Explanation: Smallest positive missing number is 1.

--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x

class Solution:
     def missingNumber(self,arr):
        n = len(arr)
        s = set(arr)
        for i in range(1, n+1):
            if i not in s:
                return i
        return n+1

Time Complexity - O(n)
Space - O(n)

--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x--x

class Solution:
    def missingNumber(self, arr):
        n = len(arr)
        
        # Step 1: Segregate non-positive numbers
        j = 0
        for i in range(n):
            if arr[i] <= 0:
                arr[i], arr[j] = arr[j], arr[i]
                j += 1
        
        # Step 2: Mark the presence of numbers
        for i in range(j, n):
            val = abs(arr[i])
            if val - 1 < n - j and arr[val - 1 + j] > 0:
                arr[val - 1 + j] = -arr[val - 1 + j]
        
        # Step 3: Find the missing number
        for i in range(j, n):
            if arr[i] > 0:
                return i - j + 1
        
        return n - j + 1

Time Complexity - O(n)
Space - O(1)
