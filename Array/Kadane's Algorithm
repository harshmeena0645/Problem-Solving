Kadane's Algorithm


Input: arr[] = [2, 3, -8, 7, -1, 2, 3]
Output: 11
Explanation: The subarray {7, -1, 2, 3} has the largest sum 11.

Input: arr[] = [-2, -4]
Output: -2
Explanation: The subarray {-2} has the largest sum -2.

Input: arr[] = [5, 4, 1, 7, 8]
Output: 25
Explanation: The subarray {5, 4, 1, 7, 8} has the largest sum 25.


class Solution:
    def maxSubArraySum(self, arr):
        max_sum=arr[0]
        current_sum=arr[0]
        
        for i in range(1,len(arr)):
            current_sum=max(arr[i],current_sum+arr[i])
            max_sum=max(max_sum,current_sum)
            
        return max_sum


class Solution:
    def maxSubArraySum(self,arr):
        sum=0
        cm=arr[0]
        for i in arr:
            sum+=i
            if sum>cm:
                cm=sum
            if sum<0:
                sum=0
        
        return cm


Time Complexity - O(n)
