MO's Algorithm (Query Square Root Decomposition) 
Interesting Queries

Given an array nums of n elements and q queries . Each query consists of two integers l and r . You task is to find the number of elements of nums[] in range [l,r] which occur atleast k times.
 

nums = {1,1,2,1,3}, Queries = {{1,5},
{2,4}}, k = 1
Output: {3,2}
Explanation: For the 1st query, from l=1 to r=5
1, 2 and 3 have the frequency atleast 1.
For the second query, from l=2 to r=4, 1 and 2 have 
the frequency atleast 1.
 

nums = {1,2,3,1}, Queries = {{1,4},
{2,4},{4,4}, k = 2
Output: {1,0,0}
Explanation: For the 1st query, from l=1 to r=4
1 have the frequency atleast 2.
For the second query, from l=2 to r=4, no number has 
the frequency atleast 2.
For the third query, from l=4 to r=4, no number has 
the frequency atleast 2.


import math
class Solution:
    def solveQueries(self, nums, Queries, k):
        n = len(nums)
        q = len(Queries)
        block_size = int(math.sqrt(n))
        
        queries = []
        for i, (l, r) in enumerate(Queries):
            queries.append((l-1, r-1, i))
        
        queries.sort(key=lambda x: (x[0]//block_size, x[1]))
        
        freq = [0] * 1001  # as nums[i] <= 10^3
        count_at_least_k = 0
        answers = [0] * q
        
        currentL, currentR = 0, -1
        
        def add(pos):
            nonlocal count_at_least_k
            val = nums[pos]
            freq[val] += 1
            if freq[val] == k:
                count_at_least_k += 1
        
        def remove(pos):
            nonlocal count_at_least_k
            val = nums[pos]
            if freq[val] == k:
                count_at_least_k -= 1
            freq[val] -= 1
        
        for L, R, idx in queries:
            while currentR < R:
                currentR += 1
                add(currentR)
            while currentR > R:
                remove(currentR)
                currentR -= 1
            while currentL < L:
                remove(currentL)
                currentL += 1
            while currentL > L:
                currentL -= 1
                add(currentL)
            
            answers[idx] = count_at_least_k
        
        return answers

Complexity:
Time complexity: approx O((n + q) * sqrt(n))
Space complexity: O(n)
