Maximum Product Subarray

Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.


Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


class Solution:
    def maxProduct(self, nums):
        if not nums:
            return 0
        
        max_so_far = min_so_far = global_max = nums[0]
        
        for i in range(1, len(nums)):
            num = nums[i]
            
            if num < 0:
                # Swap max and min because multiplying by negative flips signs
                max_so_far, min_so_far = min_so_far, max_so_far
            
            max_so_far = max(num, max_so_far * num)
            min_so_far = min(num, min_so_far * num)
            
            global_max = max(global_max, max_so_far)
        
        return global_max

