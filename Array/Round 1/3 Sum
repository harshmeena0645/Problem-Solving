3 Sum
# Two Pointer Approach

return triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k
nums[i] + nums[j] + nums[k] == 0.
Not allowed duplicate
Order of triplets not matter

nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

nums = [0,1,1]
Output: []

nums = [0,0,0]
Output: [[0,0,0]]


class Solution:
    def threeSum(self, nums):
        res = []
        nums.sort()

        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            j = i + 1
            k = len(nums) - 1

            while j < k:
                total = nums[i] + nums[j] + nums[k]
                if total > 0:
                    k -= 1
                elif total < 0:
                    j += 1
                else:
                    res.append([nums[i], nums[j], nums[k]])
                    j += 1
                    while nums[j] == nums[j-1] and j < k:
                        j += 1
        return res

Time Complexity = O(N^2)
Space Complexity  = O(1)
